package alarilab.malwaredetector.services;

import android.os.Message;

import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.DeviceInfos;
import alarilab.malwaredetector.core.LooperThread;


public class DeviceMonitor extends LooperThread {

    private static DeviceMonitor m_instance = null;
    private DeviceInfos m_deviceInfos = null;

    private DeviceMonitor() {
        super(AppData.DEVICEMONITORSERVICE, "Device_Monitor");
    }

    public static synchronized DeviceMonitor getInstance() {
        if (m_instance == null)
            m_instance = new DeviceMonitor();
        return m_instance;
    }

    public static boolean isNull() {
        return m_instance == null;
    }

    @Override
    protected void onStart() {
        m_deviceInfos = new DeviceInfos(AppData.getInstance().appContext(), m_Handler);
        m_deviceInfos.init();
    }

    @Override
    protected synchronized void onQuit() {
        if (m_deviceInfos != null) {
            m_deviceInfos.clear();
            m_deviceInfos = null;
        }
    }

    @Override
    protected void removeHandledMessages() {
        if (m_deviceInfos != null)
            m_deviceInfos.removeHandledMessages();
    }

    @Override
    public boolean handleMessage(Message msg) {

        boolean handled = false;
        if (m_deviceInfos != null)
            handled = m_deviceInfos.handleMessage(msg);

        return handled;
    }

    @Override
    public synchronized boolean stopService() {
        m_instance = null; //java does not allow to restart a thread already started even if it was stopped!
        if (m_deviceInfos != null) {
            m_deviceInfos.setExiting(true);
        }
        return super.stopService();
    }

    /* return handle to DeviceInfos object */
    public DeviceInfos getDeviceInfos() {
        return m_deviceInfos;
    }

}
