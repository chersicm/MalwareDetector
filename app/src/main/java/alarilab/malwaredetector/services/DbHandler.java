package alarilab.malwaredetector.services;

import android.content.Context;
import android.database.Cursor;
import android.os.Message;

import java.util.ArrayList;
import java.util.List;

import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.LooperThread;
import alarilab.malwaredetector.database.DbHelper;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.shared.StatisticsData;
import alarilab.malwaredetector.utility.Test.DbHandlerTester;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 01.03.15.
 */
public class DbHandler extends LooperThread {

    private static DbHandler m_instance = null;
    private final Object m_dbLocker = new Object();
    private final Object m_listStatsLocker = new Object();
    private final List<StatisticsData> m_lStatsData = new ArrayList<>();
    private DbHelper m_dbHelper = null;
    private DbHandlerTester m_dbHandlerTester = DbHandlerTester.DEBUG ? new DbHandlerTester() : null;
    private boolean m_dbReady = false;

    private DbHandler() {
        super(AppData.DBHANDLERSERVICE, "DB_Handler");
    }


    public static synchronized DbHandler getInstance() {
        if (m_instance == null)
            m_instance = new DbHandler();
        return m_instance;
    }

    public static boolean isNull() {
        return m_instance == null;
    }

    public void destroyDatabase() {
        if (isReady() && AppData.getInstance().dbHandlerEnabled()) {
            synchronized (m_dbLocker) {
                m_dbHelper.destroyDb();
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }
    }

    public boolean isReady() {
        boolean ret = isRunning() && m_dbReady;
        return ret;
    }

    @Override
    protected void onStart() {
        synchronized (m_dbLocker) {
            Context context;

            if (AppData.getInstance().mountDbOnExternalStorage())
                context = new DbHelper.DbContext(AppData.getInstance().appContext());
            else
                context = AppData.getInstance().appContext();

            m_dbHelper = new DbHelper(context);

            m_dbHelper.open();
            m_dbReady = m_dbHelper.isReady();

            List<StatisticsData> lStats = AppData.getInstance().getCachedStatistics();
            if (!lStats.isEmpty())
                m_dbHelper.saveStatistics(lStats);

            // just useful for test
            if (m_dbHandlerTester != null)
                m_dbHandlerTester.start();
        }
    }

    @Override
    protected void onQuit() {
        synchronized (m_dbLocker) {
            if (m_dbHelper != null) {
                if (m_dbHandlerTester != null) {
                    m_dbHandlerTester.clear();
                }
                m_dbHandlerTester = null;
                m_dbHelper.close();
                m_dbReady = false;
                m_dbHelper = null;
            }
        }

    }

    @Override
    protected void removeHandledMessages() {
        m_Handler.removeMessages(Signal.NEW_STATS_LIST_TO_WRITE_IN_DB_AVAILABLE);
        m_Handler.removeMessages(Signal.SAVE_TABLES_CONTENTS_IN_FILE);
    }

    @Override
    public boolean handleMessage(Message msg) {
        //To avoid memory leaks, Remember to remove any pending handled messages in the function removeHandledMessages().
        //This function is called when the service is stopped.
        boolean handled = false;
        if (isRunning() && AppData.getInstance().dbHandlerEnabled()) {
            switch (msg.what) {
                case Signal.NEW_STATS_LIST_TO_WRITE_IN_DB_AVAILABLE: {

                    synchronized (m_dbLocker) {
                        m_dbHelper.saveStatistics((List<StatisticsData>) msg.obj);
                    }

                    handled = true;
                }
                break;

                case Signal.SAVE_TABLES_CONTENTS_IN_FILE: {

                    Signal sig = AppData.obtainSignal(AppData.MAINACTIVITYSERVICE);//new Utils.Signal(); //send to mainactivity
                    if (sig != null) {

                        synchronized (m_dbLocker) {
                            if (msg.arg2 == 0)
                                sig.m_arg1 = m_dbHelper.readTablesContentsAndSaveInFile((String) msg.obj,
                                        msg.arg1 == 1);
                            else
                                sig.m_arg1 = m_dbHelper.readTablesMergeAndDumpToFile((String) msg.obj,
                                        msg.arg1 == 1);
                        }
                        sig.m_signalId = Signal.SAVE_TABLES_CONTENTS_IN_FILE;
                        sig.emit();//Utils.emit(sig);
                    }
                    handled = true;
                }
                break;

                case Signal.RECORD_AVAILABLE: {

                    StatisticsData record = (StatisticsData) msg.obj;
                    synchronized (m_dbLocker) {
                        m_dbHelper.saveRecord(record);
                    }

                    handled = true;
                }
                break;

                default:
                    L.w("Message with id: " + msg.what + " not handled!");
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }

        return handled;
    }

    @Override
    public synchronized boolean stopService() {
        m_instance = null; //java does not allow to restart a thread already started even if it was stopped!
        return super.stopService();
    }

    public boolean isRunning() {
        boolean ret;
        synchronized (m_dbLocker) {
            ret = isAlive() && m_dbHelper != null;
        }
        return ret;
    }

    public boolean saveData(List<StatisticsData> l_data, boolean asyncMode) {
        boolean retVal = false;
        if (AppData.getInstance().dbHandlerEnabled()) {
            boolean isReady = isReady();
            if (isReady || isRunning()) {
                if (!l_data.isEmpty()) {
                    if (isReady && !asyncMode) {
                        synchronized (m_dbLocker) {
                            retVal = m_dbHelper.saveStatistics(l_data);
                        }
                    } else if (!asyncMode) {
                        L.w("The Database is not ready yet! Statistics data will be saved as soon as it get ready to execute command!");
                    }

                    if (asyncMode || !isReady) {
                        // synchronized (m_listStatsLocker) {
                        //m_lStatsData.addAll(l_data);
                        List<StatisticsData> data = new ArrayList<>();
                        data.addAll(l_data);
                        Signal sig = new Signal(m_Handler);
                        sig.m_signalId = Signal.NEW_STATS_LIST_TO_WRITE_IN_DB_AVAILABLE;
                        sig.m_obj = data;
                        sig.emit();//Utils.emit(sig);
                        retVal = true;
                        //}
                    }

                } else {
                    L.w("It's not allowed to save empty list of statistics! Ignoring operation...");
                }
            } else {
                L.e("Cannot save statistics! The database handler is not running!");
            }
        } else {
            L.e("Cannot save statistics! The database is not enabled!");
        }

        return retVal;
    }

    public List<StatisticsData> readTablesContents(boolean delRowsAfterRead) {
        List<StatisticsData> lStats = null;
        if (isRunning() && AppData.getInstance().dbHandlerEnabled()) {
            synchronized (m_dbLocker) {
                lStats = m_dbHelper.readContentsOfAllTables(delRowsAfterRead);
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }
        return lStats;
    }

    public List<StatisticsData> readTableContents(String tblName, boolean delRowsAfterRead) {

        List<StatisticsData> lStats = null;

        if (isReady() && AppData.getInstance().dbHandlerEnabled()) {
            synchronized (m_dbLocker) {
                lStats = m_dbHelper.readTableContents(tblName, delRowsAfterRead);
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }
        return lStats;
    }

    public boolean isTableExists(String tblName) {
        boolean ret = false;
        if (isReady() && AppData.getInstance().dbHandlerEnabled()) {
            synchronized (m_dbLocker) {
                ret = m_dbHelper.isTableExists(tblName);
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }

        return ret;
    }

    public Cursor execRawQuery(String sql, String[] selectionArgs) {
        Cursor cursor = null;
        if (isRunning() && AppData.getInstance().dbHandlerEnabled()) {
            synchronized (m_dbLocker) {
                cursor = m_dbHelper.db().rawQuery(sql, selectionArgs);
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }
        return cursor;

    }

    public void deleteContentsTable(String tblName) {
        if (isReady() && AppData.getInstance().dbHandlerEnabled()) {
            if (tblName != null && !tblName.isEmpty()) {
                synchronized (m_dbLocker) {
                    m_dbHelper.db().delete(tblName, null, null);
                }
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }
    }

    public int getNumRows(String tblName) {
        int ret = -1;
        if (isReady() && AppData.getInstance().dbHandlerEnabled()) {
            if (tblName != null && !tblName.isEmpty()) {
                synchronized (m_dbLocker) {
                    ret = m_dbHelper.getNumRows(tblName);
                }
            }
        } else {
            L.w("The Database handler is not running or it's disabled. Check the application's configurations!");
        }

        return ret;
    }

}
