package alarilab.malwaredetector.ui;

import android.app.Activity;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;

import alarilab.malwaredetector.R;
import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.resources.ResourceUsage;
import alarilab.malwaredetector.utility.logger.L;

public class PreferencesTab extends Fragment {

    View.OnKeyListener m_keyListener = null;
    View.OnClickListener m_clickListener = null;
    View.OnFocusChangeListener m_focusChangeListener = null;
    private ViewsHolder m_viewsHolder = null;
    private TabListener.OnProcessActionRequestListener mListener;


    public PreferencesTab() {
        // Required empty public constructor
    }

    public static PreferencesTab newInstance(String param1, String param2) {
        PreferencesTab fragment = new PreferencesTab();
        return fragment;
    }

    public void onSystemInfosChanged(AppData.CurrentSysInfos sysInfos) {
        if (m_viewsHolder != null)
            m_viewsHolder.updateViewsState();
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mListener = (TabListener.OnProcessActionRequestListener) activity;
            mListener.onFragmentReady(getClass().getName(), this);
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnProcessActionRequestListener");
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        m_clickListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onItemClicked(v);
            }
        };

        m_keyListener = new View.OnKeyListener() {
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                if (keyCode == KeyEvent.KEYCODE_ENTER) {
                    onEnterPressed(v);
                }
                return false;
            }
        };

        m_focusChangeListener = new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    onEnterPressed(v);
                }
            }
        };
    }

    private void onItemClicked(View v) {

        if (m_viewsHolder != null) {
            Integer tag = (Integer) v.getTag();
            switch (tag) {
                case ViewsHolder.ALL_PROC_MON_CHK_BX:
                    AppData.getInstance().setMonitorAllProcessesStatus(m_viewsHolder.m_allProcMonChkBx.isChecked());
                    break;
                case ViewsHolder.BATT_MON_CHK_BX:
                    AppData.getInstance().setBatteryMonitorStatus(m_viewsHolder.m_battMonChkBx.isChecked());
                    break;
                case ViewsHolder.CPU_MON_CHK_BX:
                    AppData.getInstance().setCpuMonitorStatus(m_viewsHolder.m_cpuMonChkBx.isChecked());
                    break;
                case ViewsHolder.DB_HANDLER_CHK_BX:
                    AppData.getInstance().setDbHandlerStatus(m_viewsHolder.m_dbHandlerChkBx.isChecked());
                    m_viewsHolder.updateViewsState();
                    break;
                case ViewsHolder.DEV_MON_CHK_BX: {
                    AppData.getInstance().setDeviceMonitorStatus(m_viewsHolder.m_devMonChkBx.isChecked());
                    m_viewsHolder.updateViewGroup();
                }
                break;
                case ViewsHolder.DISPLAY_MON_CHK_BX:
                    AppData.getInstance().setDisplayMonitorStatus(m_viewsHolder.m_displayMonChkBx.isChecked());
                    break;
                case ViewsHolder.MALWARE_MON_CHK_BX:
                    AppData.getInstance().setMalwareAnalyserStatus(m_viewsHolder.m_malwareMonChkBx.isChecked());
                    break;
                case ViewsHolder.RAM_MON_CHK_BX:
                    AppData.getInstance().setMemMonitorStatus(m_viewsHolder.m_ramMonChkBx.isChecked());
                    break;
                case ViewsHolder.SYS_CALLS_MON_CHK_BX:
                    AppData.getInstance().setSysCallMonitorStatus(m_viewsHolder.m_sysCallsMonChkBx.isChecked());
                    m_viewsHolder.updateViewsState();
                    break;
                case ViewsHolder.SYS_CALLS_STAT_CHK_BX:
                    AppData.getInstance().setSysCallsStatisticsStatus(m_viewsHolder.m_sysCallsStatChkBx.isChecked());
                    break;
                case ViewsHolder.PROC_MON_CHK_BX:
                    AppData.getInstance().setProcessMonitorStatus(m_viewsHolder.m_procMonChkBx.isChecked());
                    break;
                case ViewsHolder.MOUNT_IN_EXTERNAL_STORAGE:
                    AppData.getInstance().setMountDbOnExternalStorage(m_viewsHolder.m_mountInExternalStorChkBx.isChecked());
                    break;
                case ViewsHolder.SYSTEM_APPS_MON_CHK_BX:
                    AppData.getInstance().setSystemAppsMonitoringStatus(m_viewsHolder.m_sysAppsMonChkBx.isChecked());
                    break;
                default:
                    L.w("Unhandled clicked event!");
            }

            m_viewsHolder.updateViewsState();
        }
    }

    private void onEnterPressed(View v) {

        ResourceUsage.RESOURCETYPE type = (ResourceUsage.RESOURCETYPE) v.getTag();

        if (m_viewsHolder != null) {
            if (type.ordinal() == ResourceUsage.RESOURCETYPE.RAM.ordinal()) {
                long val = (long) (Float.parseFloat(m_viewsHolder.m_ramFreq.getText().toString()) * 1000);
                AppData.getInstance().setMemRefreshTime(val);

            }
            else if (type.ordinal() == ResourceUsage.RESOURCETYPE.CPU.ordinal()) {
                long val = (long) (Float.parseFloat(m_viewsHolder.m_cpufreq.getText().toString()) * 1000);
                AppData.getInstance().setCpuRefreshTime(val);
            }
            else if (type.ordinal() == ResourceUsage.RESOURCETYPE.PROC.ordinal()) {
                long val = (long) (Float.parseFloat(m_viewsHolder.m_procFreq.getText().toString()) * 1000);
                AppData.getInstance().setProcessListRefreshTime(val);
            }
            else if (type.ordinal() == ResourceUsage.RESOURCETYPE.BATTERY.ordinal()) {
                long val = (long) (Float.parseFloat(m_viewsHolder.m_battFreq.getText().toString()) * 1000);
                AppData.getInstance().setBatteryRefreshTime(val);
            }
            else if (type.ordinal() == ResourceUsage.RESOURCETYPE.DISPLAY.ordinal()) {
                long val = (long) (Float.parseFloat(m_viewsHolder.m_uiFreq.getText().toString()) * 1000);
                AppData.getInstance().setUIRefreshTime(val);
            }
            else if (type.ordinal() == ResourceUsage.RESOURCETYPE.DB.ordinal()) {
                long val = (long) (Float.parseFloat(m_viewsHolder.m_dumpTimeRes.getText().toString()));
                AppData.getInstance().setDbDumpResTime(val);
            }
            else {
                L.w("Unhandled enter pressed event!");
            }
        }

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        // Inflate the layout for this fragment
        View ret = inflater.inflate(R.layout.app_preferences, container, false);
        m_viewsHolder = new ViewsHolder(ret);
        return ret;
    }

    @Override
    public void onDestroyView() {
        m_viewsHolder = null;
        super.onDestroyView();
    }

    @Override
    public void onDestroy() {
        if (mListener != null)
            mListener.onFragmentDestroy(getClass().getName());
        mListener = null;
        m_viewsHolder = null;
        m_keyListener = null;
        m_focusChangeListener = null;

        super.onDestroy();
    }

    @Override
    public void onDetach() {
        super.onDetach();

    }

    private class ViewsHolder {
        public final static int DEV_MON_CHK_BX = 0;
        public final static int DB_HANDLER_CHK_BX = 1;
        public final static int SYS_CALLS_MON_CHK_BX = 2;
        public final static int SYS_CALLS_STAT_CHK_BX = 3;
        public final static int MALWARE_MON_CHK_BX = 4;
        public final static int ALL_PROC_MON_CHK_BX = 5;
        public final static int DISPLAY_MON_CHK_BX = 6;
        public final static int BATT_MON_CHK_BX = 7;
        public final static int RAM_MON_CHK_BX = 8;
        public final static int CPU_MON_CHK_BX = 9;
        public final static int PROC_MON_CHK_BX = 10;
        public final static int SYSTEM_APPS_MON_CHK_BX = 11;
        public final static int MOUNT_IN_EXTERNAL_STORAGE = 12;

        private final View mRoot;
        public CheckBox m_devMonChkBx;
        public CheckBox m_dbHandlerChkBx;
        public CheckBox m_sysCallsMonChkBx;
        public CheckBox m_sysCallsStatChkBx;
        public CheckBox m_malwareMonChkBx;
        public ViewGroup m_viewGroup;
        public CheckBox m_sysAppsMonChkBx;
        public CheckBox m_ramMonChkBx;
        public CheckBox m_cpuMonChkBx;
        public CheckBox m_displayMonChkBx;
        public CheckBox m_battMonChkBx;
        public CheckBox m_allProcMonChkBx;
        public CheckBox m_procMonChkBx;
        public CheckBox m_mountInExternalStorChkBx;
        public TextView m_adsEnablingMountFlag;

        public EditText m_cpufreq;
        public EditText m_procFreq;
        public EditText m_ramFreq;
        public EditText m_battFreq;
        public EditText m_uiFreq;
        public EditText m_dumpTimeRes;

        public TextView m_rootDevNeededView;

        public ViewsHolder(View root) {
            mRoot = root;
            m_cpufreq = (EditText) mRoot.findViewById(R.id.rfrCpuFreq);
            initTextEdit(
                    m_cpufreq,
                    ResourceUsage.RESOURCETYPE.CPU,
                    AppData.getInstance().cpuRefreshTime()
            );

            m_ramFreq = (EditText) mRoot.findViewById(R.id.rfrRamFreq);
            initTextEdit(
                    m_ramFreq,
                    ResourceUsage.RESOURCETYPE.RAM,
                    AppData.getInstance().memRefreshTime()
            );

            m_battFreq = (EditText) mRoot.findViewById(R.id.rfrBattFreq);
            initTextEdit(
                    m_battFreq,
                    ResourceUsage.RESOURCETYPE.BATTERY,
                    AppData.getInstance().batteryRefreshTime()
            );

            m_procFreq = (EditText) mRoot.findViewById(R.id.rfrProcFreq);
            initTextEdit(
                    m_procFreq,
                    ResourceUsage.RESOURCETYPE.PROC,
                    AppData.getInstance().processListRefreshTime()
            );

            m_uiFreq = (EditText) mRoot.findViewById(R.id.rfrUiFreq);
            initTextEdit(
                    m_uiFreq,
                    ResourceUsage.RESOURCETYPE.DISPLAY,
                    AppData.getInstance().uiRefreshTime()
            );

            m_dumpTimeRes = (EditText) mRoot.findViewById(R.id.dumpTimeResVal);
            initTextEdit(
                    m_dumpTimeRes,
                    ResourceUsage.RESOURCETYPE.DB,
                    AppData.getInstance().dbDumpResTime() * 1000
            );

            m_devMonChkBx = (CheckBox) mRoot.findViewById(R.id.enableDevMon);
            initCheckBox(
                    m_devMonChkBx,
                    DEV_MON_CHK_BX,
                    AppData.getInstance().deviceMonitorEnabled()
            );

            m_viewGroup = (ViewGroup) mRoot.findViewById(R.id.viewGroup);
            updateViewGroup();

            m_sysCallsMonChkBx = (CheckBox) mRoot.findViewById(R.id.enableSysCallsMon);
            initCheckBox(
                    m_sysCallsMonChkBx,
                    SYS_CALLS_MON_CHK_BX,
                    AppData.getInstance().sysCallMonitorEnabled()
            );

            m_dbHandlerChkBx = (CheckBox) mRoot.findViewById(R.id.enableDbHandler);
            initCheckBox(
                    m_dbHandlerChkBx,
                    DB_HANDLER_CHK_BX,
                    AppData.getInstance().dbHandlerEnabled()
            );

            m_sysCallsStatChkBx = (CheckBox) mRoot.findViewById(R.id.enableSysCallsStats);
            initCheckBox(
                    m_sysCallsStatChkBx,
                    SYS_CALLS_STAT_CHK_BX,
                    AppData.getInstance().sysCallsStatEnabled()
            );

            m_malwareMonChkBx = (CheckBox) mRoot.findViewById(R.id.enableMalwareMon);
            initCheckBox(
                    m_malwareMonChkBx,
                    MALWARE_MON_CHK_BX,
                    AppData.getInstance().malwareAnalyserEnabled()
            );

            m_mountInExternalStorChkBx = (CheckBox) mRoot.findViewById(R.id.mountDbInExternalStorage);
            initCheckBox(
                    m_mountInExternalStorChkBx,
                    MOUNT_IN_EXTERNAL_STORAGE,
                    AppData.getInstance().mountDbOnExternalStorage()
            );

            m_adsEnablingMountFlag = (TextView) mRoot.findViewById(R.id.adsEnablingMountFlag);


            m_rootDevNeededView = (TextView) mRoot.findViewById(R.id.labelNoRoot);

            updateViewsState();
        }

        private void initTextEdit(EditText editText, ResourceUsage.RESOURCETYPE resType, long value) {
            editText.setOnKeyListener(m_keyListener);
            editText.setOnFocusChangeListener(m_focusChangeListener);
            editText.setTag(resType);
            editText.setText(String.valueOf(value * 1f / 1000f));
        }

        private void initCheckBox(CheckBox chkbx, int tag, boolean value) {
            chkbx.setOnClickListener(m_clickListener);
            chkbx.setTag(tag);
            chkbx.setChecked(value);
        }

        private void updateViewGroup() {

            m_viewGroup.setVisibility(m_devMonChkBx.isChecked() ? View.VISIBLE : View.GONE);

            if (m_devMonChkBx.isChecked()) {
                m_allProcMonChkBx = (CheckBox) m_viewGroup.findViewById(R.id.enableMonAllProc);
                initCheckBox(
                        m_allProcMonChkBx,
                        ALL_PROC_MON_CHK_BX,
                        AppData.getInstance().monitorAllProcessesEnabled()
                );

                m_sysAppsMonChkBx = (CheckBox) m_viewGroup.findViewById(R.id.enableSysAppsMon);
                initCheckBox(
                        m_sysAppsMonChkBx,
                        SYSTEM_APPS_MON_CHK_BX,
                        AppData.getInstance().systemAppsMonitoringEnabled()
                );

                m_cpuMonChkBx = (CheckBox) m_viewGroup.findViewById(R.id.enableCpuMon);
                initCheckBox(
                        m_cpuMonChkBx,
                        CPU_MON_CHK_BX,
                        AppData.getInstance().cpuMonitorEnabled()
                );
                m_battMonChkBx = (CheckBox) m_viewGroup.findViewById(R.id.enableBattMon);
                initCheckBox(
                        m_battMonChkBx,
                        BATT_MON_CHK_BX,
                        AppData.getInstance().batteryMonitorEnabled()
                );

                m_ramMonChkBx = (CheckBox) m_viewGroup.findViewById(R.id.enableRamMon);
                initCheckBox(
                        m_ramMonChkBx,
                        RAM_MON_CHK_BX,
                        AppData.getInstance().memMonitorEnabled()
                );

                m_displayMonChkBx = (CheckBox) m_viewGroup.findViewById(R.id.enableDisplayMon);
                initCheckBox(
                        m_displayMonChkBx,
                        DISPLAY_MON_CHK_BX,
                        AppData.getInstance().displayMonitorEnabled()
                );

                m_procMonChkBx = (CheckBox) m_viewGroup.findViewById(R.id.enableProcMon);
                initCheckBox(
                        m_procMonChkBx,
                        PROC_MON_CHK_BX,
                        AppData.getInstance().processMonitorEnabled()
                );
            }
            else {
                //let's invalidate the cached views since they gone, and
                // we can't guarantee that the view will be the same object
                // when the viewgroup will turn ready
                m_allProcMonChkBx = null;
                m_cpuMonChkBx = null;
                m_battMonChkBx = null;
                m_ramMonChkBx = null;
                m_procMonChkBx = null;
                m_displayMonChkBx = null;
            }
        }

        private void updateViewsState() {

            m_procFreq.setEnabled(m_procMonChkBx != null && m_procMonChkBx.isChecked());
            m_cpufreq.setEnabled(m_cpuMonChkBx != null && m_cpuMonChkBx.isChecked());
            m_ramFreq.setEnabled(m_ramMonChkBx != null && m_ramMonChkBx.isChecked());
            m_battFreq.setEnabled(m_battMonChkBx != null && m_battMonChkBx.isChecked());

            boolean isroot = AppData.getInstance().isRoot();
            //m_sysCallsMonChkBx.setEnabled(isroot);
            boolean isChecked = m_sysCallsMonChkBx.isChecked();
            m_rootDevNeededView.setVisibility(isroot || !(isChecked && !isroot) ? View.GONE : View.VISIBLE);
            m_mountInExternalStorChkBx.setEnabled(!m_dbHandlerChkBx.isChecked());
            m_adsEnablingMountFlag.setVisibility(m_mountInExternalStorChkBx.isChecked() ? View.VISIBLE : View.GONE);
        }

    }

}