package alarilab.malwaredetector.ui;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import alarilab.malwaredetector.R;
import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.resources.AppProcess;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.utility.Utils;
import alarilab.malwaredetector.utility.logger.L;

/**
 * A simple {@link android.app.Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link alarilab.malwaredetector.ui.TabListener.OnProcessActionRequestListener} interface
 * to handle interaction events.
 * Use the {@link ProcessesTab#newInstance} factory method to
 * create an instance of this fragment.
 */
public class ProcessesTab extends ListFragment {

    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";
    private LayoutInflater m_inflater = null;
    private ViewsHolder m_viewsHolder = null;
    private View.OnClickListener m_clickListener = null;
    private ProgressDialog m_progressDialog;

    private ProcessAdapter m_procAdapter = null;
    private List<AppProcess.ProcessData> m_list = null;
    private TabListener.OnProcessActionRequestListener mListener;
    private View.OnClickListener m_checkBoxListener = null;

    public ProcessesTab() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment Test1Fragment.
     */
    // TODO: Rename and change types and number of parameters
    public static ProcessesTab newInstance(String param1, String param2) {
        ProcessesTab fragment = new ProcessesTab();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    public void onFinishSaving(int res) {
        if (m_progressDialog != null && m_progressDialog.isShowing()) {
            m_progressDialog.dismiss();
            m_progressDialog = null;
        }

        String resultLbl = "";
        if (res == 0) {
            resultLbl = getString(R.string.save_success);
        }
        else {
            resultLbl = getString(R.string.save_failed);
        }

        m_viewsHolder.m_btnSaveView.setEnabled(true);
        m_viewsHolder.m_btnSave1View.setEnabled(true);

        Toast.makeText(getActivity().getApplicationContext(), resultLbl, Toast.LENGTH_LONG).show();

    }

    private void onUserChooseSaveOption(int btnId, int saveOpt) {
        int selectOp = -1;

        switch (btnId) {
            case DialogInterface.BUTTON_POSITIVE:
                selectOp = 1;
                break;
            case DialogInterface.BUTTON_NEGATIVE:
                selectOp = 0;
                break;
            case DialogInterface.BUTTON_NEUTRAL:
                L.d("Operation cancel!");
                break;
            default:
                break;
        }

        if (selectOp != -1) {
            Signal sig =  AppData.obtainSignal(AppData.DBHANDLERSERVICE);//new Utils.Signal(DbHandler.getInstance().handler());
            if(sig != null) {
                sig.m_signalId = Signal.SAVE_TABLES_CONTENTS_IN_FILE;
                sig.m_obj = "";
                sig.m_arg1 = selectOp;
                sig.m_arg2 = saveOpt;
                sig.emit();
            }
            m_progressDialog = new ProgressDialog(getActivity());
            m_progressDialog.setTitle("Saving...");
            m_progressDialog.setMessage("Please wait.");
            m_progressDialog.setCancelable(false);
            m_progressDialog.setIndeterminate(true);
            m_progressDialog.show();
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View ret = inflater.inflate(R.layout.tab_processes, container, false);
        m_inflater = inflater;
        m_viewsHolder = new ViewsHolder(ret);
        return ret;
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        setRetainInstance(true);
        if (m_procAdapter == null) {
            m_list = new ArrayList<>();
            m_procAdapter = new ProcessAdapter(this.getListView(), getActivity(), m_list);
        }
        setListAdapter(m_procAdapter);
    }

    @Override
    public void onDestroyView() {
        m_viewsHolder = null;
        super.onDestroyView();
    }

    @Override
    public void onListItemClick(ListView l, View v, int position, long id) {


    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mListener = (TabListener.OnProcessActionRequestListener) activity;
            mListener.onFragmentReady(getClass().getName(), this);
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnProcessActionRequestListener");
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        /*if (getArguments() != null) {

        }*/

        m_clickListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onItemClicked(v);
            }
        };


        m_checkBoxListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Integer pid = (Integer) v.getTag();
                ListItemViewsHolder viewsHolder = (ListItemViewsHolder) v.getTag();
                if (viewsHolder.m_pid != 0) {
                    try {
                        onMonitorFlagChanged(viewsHolder.m_pid, ((CheckBox) v).isChecked());
                    } catch (ClassCastException e) {
                        e.printStackTrace();
                        L.w("The view clicked is not a checkbox!! error: ");
                    }

                }
                else {
                    L.e("The tag value was not set in this checkbox!");
                }

            }
        };

    }

    private void onItemClicked(View view) {
        if (view != null) {
            switch ((Integer) view.getTag()) {
                case ViewsHolder.SAVE_BTN: {
                    if (AppData.getInstance().dbHandlerEnabled()) {
                        m_viewsHolder.m_btnSaveView.setEnabled(false);
                        SaveOptStatsDialogFragment dialog = new SaveOptStatsDialogFragment();
                        Bundle args = new Bundle();
                        args.putInt("SAVE", 0);
                        dialog.setArguments(args);
                        dialog.show(getFragmentManager(), "Save");
                    }
                    else {
                        Toast.makeText(getActivity().getApplicationContext(), R.string.db_not_enabled, Toast.LENGTH_LONG).show();
                    }
                    break;
                }
                case ViewsHolder.SAVE_BTN1: {
                    if (AppData.getInstance().dbHandlerEnabled()) {
                        m_viewsHolder.m_btnSave1View.setEnabled(false);
                        SaveOptStatsDialogFragment dialog = new SaveOptStatsDialogFragment();
                        Bundle args = new Bundle();
                        args.putInt("SAVE", 1);
                        dialog.setArguments(args);
                        dialog.show(getFragmentManager(), "Save");
                    }
                    else {
                        Toast.makeText(getActivity().getApplicationContext(), R.string.db_not_enabled, Toast.LENGTH_LONG).show();
                    }
                    break;
                }
                default:
                    L.w("Unknown click event! ignoring it...");
            }
        }
    }

    public void onMonitorFlagChanged(int pid, boolean enabled) {
        if (mListener != null) {
            mListener.onMonitorFlagChanged(pid, enabled);
        }
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }

    @Override
    public void onDestroy() {
        if (mListener != null)
            mListener.onFragmentDestroy(getClass().getName());
        mListener = null;
        m_checkBoxListener = null;
        m_clickListener = null;
        if (m_progressDialog != null)
            m_progressDialog.dismiss();
        m_progressDialog = null;
        super.onDestroy();
    }

    @Override
    public void onDetach() {
        super.onDetach();

    }

    public void onProcessListInfosChanged(List<AppProcess> l_proc) {
        ((ProcessAdapter) getListAdapter()).onProcessListChanged(l_proc);
    }

    public void updateProcMonitorFlag(boolean val) {
        ((ProcessAdapter) getListAdapter()).updateProcMonitorFlag(val);
    }

    private class ProcessAdapter extends ArrayAdapter<AppProcess.ProcessData> {

        private ListView m_listView = null;

        public ProcessAdapter(final ListView listView, Context context, List<AppProcess.ProcessData> objects) {
            super(context, R.layout.process_data, objects);
            m_listView = listView;
            setNotifyOnChange(true);
        }

        void updateProcMonitorFlag(boolean val) {
            int size = m_list.size();
            for (int i = 0; i < size; ++i) {
                m_list.get(i).m_monitorEnabled = val;
            }
            this.notifyDataSetChanged();
        }

        void onProcessListChanged(List<AppProcess> l_proc) {
            int numItem = this.getCount();
            List<AppProcess.ProcessData> toRem = new ArrayList<>();
            boolean found;
            boolean updated;
            for (int i = 0; i < numItem; ++i) {
                found = false;
                updated = false;
                AppProcess.ProcessData data = getItem(i);
                Iterator<AppProcess> iter = l_proc.iterator();
                while (iter.hasNext()) {
                    AppProcess proc = iter.next();

                    if (proc.pid() == data.m_pid) {
                        if ((proc.isMonitored()) || (data.m_monitorEnabled && !proc.isMonitored())) {
                            updated = true;
                            data.m_ramUsage = proc.ramUsage();
                            data.m_monitorEnabled = proc.isMonitored();
                            data.m_cpuUsage = proc.cpuUsage();
                            data.m_name = proc.processName();
                            data.m_numSysCalls = proc.numSysCalls();
                            data.m_batteryUsage = proc.batteryUsage();
                            data.m_uid = proc.uid();
                        }

                        found = true;
                        iter.remove();
                        break;
                    }
                }

                if (!found)
                    toRem.add(data);

                /*if(updated) {
                    updateView(i, data.m_pid);
                }*/
            }

            boolean notifyChanges = !toRem.isEmpty() || !l_proc.isEmpty();
            //remove not found processes
            if (!toRem.isEmpty()) {
                for (AppProcess.ProcessData data : toRem) {
                    this.remove(data);
                }
                toRem.clear();

            }

            //add new processes in the listview
            if (!l_proc.isEmpty()) {
                for (AppProcess proc : l_proc) {
                    this.add(proc.getData());
                }
            }

            //if(notifyChanges)
            this.notifyDataSetChanged();

            if (m_viewsHolder != null)
                m_viewsHolder.updateView();
        }

        public void updateView(int idx, int pid) {
            int visPos = m_listView.getFirstVisiblePosition();
            int selPos = idx - visPos;

            View v = m_listView.getChildAt(selPos);

            if (v != null) {
                ListItemViewsHolder viewsHolder = (ListItemViewsHolder) v.getTag();
                if (viewsHolder.m_pid == pid) {
                    // viewsHolder.update(this.getItem(idx));
                    m_listView.getAdapter().getView(idx, v, m_listView);

                }
                else {
                    L.e("The wrong view was chosen!");
                }
            }

            notifyDataSetChanged();

        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View view = convertView;
            ListItemViewsHolder viewsHolder;
            AppProcess.ProcessData proc = this.getItem(position);
            if (view == null) {
                view = m_inflater.inflate(R.layout.process_data, null);
                viewsHolder = new ListItemViewsHolder(view, proc.m_pid);
                view.setTag(viewsHolder);
            }
            else {
                viewsHolder = (ListItemViewsHolder) view.getTag();
            }

            if (viewsHolder != null) {
                viewsHolder.update(proc);
            }
            else {
                L.e("viewsHolder not found for item at position (" + position + ")");
            }

            return view;
        }

    }


    private class ListItemViewsHolder {
        private final View m_root;
        public TextView m_procName;
        public CheckBox m_monitorEnabled;
        public TextView m_cpuUsage;
        public TextView m_batteryUsage;
        public TextView m_ramUsage;
        int m_pid = 0;

        public ListItemViewsHolder(View root, int pid) {
            m_root = root;
            m_procName = (TextView) m_root.findViewById(R.id.proc_name);
            m_monitorEnabled = (CheckBox) m_root.findViewById(R.id.monitor_enabled);
            m_monitorEnabled.setTag(this);
            m_monitorEnabled.setOnClickListener(m_checkBoxListener);
            m_monitorEnabled.setVisibility(!AppData.getInstance().monitorAllProcessesEnabled() ? View.VISIBLE : View.GONE);
            m_cpuUsage = (TextView) m_root.findViewById(R.id.cpu_usage);
            m_batteryUsage = (TextView) m_root.findViewById(R.id.battery_Usage);
            m_ramUsage = (TextView) m_root.findViewById(R.id.memory_usage);
            m_pid = pid;
        }

        void update(AppProcess.ProcessData data) {
            m_pid = data.m_pid;
            //update processName
            m_procName.setText(Utils.getAppName(data.m_name) + " (" + data.m_pid + ")");
            //update icon
            m_procName.setCompoundDrawablesWithIntrinsicBounds(data.m_icon, null, null, null);
            //update ramUsage
            m_ramUsage.setText("RAM: " + Utils.toHumanReadableSize(data.m_ramUsage * 1024));
            //update battery
            m_batteryUsage.setText("Battery: " + Utils.toHumanReadablePerc(data.m_batteryUsage));
            //update cpu
            m_cpuUsage.setText("CPU: " + Utils.toHumanReadablePerc(data.m_cpuUsage));
            //update monitorflag
            m_monitorEnabled.setChecked(data.m_monitorEnabled);
            m_monitorEnabled.setTag(this);
        }
    }

    private class ViewsHolder {

        private final static int SAVE_BTN = 0;
        private final static int SAVE_BTN1 = 1;
        private final View mRoot;
        public ViewGroup m_busyProgressView = null;
        public ViewGroup m_listViewLayoutView = null;
        public ViewGroup m_procMonNotEnabledLayoutView = null;
        public ImageButton m_btnSaveView;
        public ImageButton m_btnSave1View;


        public ViewsHolder(View root) {
            mRoot = root;

            m_busyProgressView = (ViewGroup) mRoot.findViewById(R.id.busyProgressProc);
            m_listViewLayoutView = (ViewGroup) mRoot.findViewById(R.id.listviewLayout);
            m_btnSaveView = (ImageButton) mRoot.findViewById(R.id.btnSave);
            m_btnSaveView.setOnClickListener(m_clickListener);
            m_btnSaveView.setTag(SAVE_BTN);

            m_btnSave1View = (ImageButton) mRoot.findViewById(R.id.btnSave1);
            m_btnSave1View.setOnClickListener(m_clickListener);
            m_btnSave1View.setTag(SAVE_BTN1);

            m_procMonNotEnabledLayoutView = (ViewGroup) mRoot.findViewById(R.id.procMonNotEnabled);

            updateView();
        }

        private void updateView() {
            boolean justCreated = (m_list == null);

            if (AppData.getInstance().deviceMonitorEnabled() || !justCreated) {
                m_procMonNotEnabledLayoutView.setVisibility(View.GONE);
                m_busyProgressView.setVisibility(!justCreated ? View.GONE : View.VISIBLE);
            }
            else {
                m_procMonNotEnabledLayoutView.setVisibility(View.VISIBLE);
                m_busyProgressView.setVisibility(View.GONE);
            }


            m_listViewLayoutView.setVisibility(justCreated ? View.GONE : View.VISIBLE);
        }

    }


    private class SaveOptStatsDialogFragment extends DialogFragment {
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {

            final int saveOption = getArguments().getInt("SAVE");

            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

            builder.setMessage(R.string.saving_option)
                    .setPositiveButton(R.string.save_with_del, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            onUserChooseSaveOption(id,saveOption);
                        }
                    })
                    .setNegativeButton(R.string.save_with_no_del, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            onUserChooseSaveOption(id,saveOption);
                        }
                    })
                    .setNeutralButton(R.string.cancel, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            SaveOptStatsDialogFragment.this.getDialog().cancel();
                        }
                    })
            ;
            // Create the AlertDialog object and return it
            return builder.create();
        }
    }
}