package alarilab.malwaredetector.ui;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import alarilab.malwaredetector.R;
import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.utility.Utils;

/**
 * A simple {@link android.app.Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link alarilab.malwaredetector.ui.TabListener.OnProcessActionRequestListener} interface
 * to handle interaction events.
 */

public class SystemInfosTab extends Fragment {

    AppData.CurrentSysInfos m_sysInfos = null;
    private TabListener.OnProcessActionRequestListener mListener;
    private ViewsHolder m_viewsHolder = null;

    public SystemInfosTab() {
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mListener = (TabListener.OnProcessActionRequestListener) activity;
            mListener.onFragmentReady(getClass().getName(), this);
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnProcessActionRequestListener");
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View ret = inflater.inflate(R.layout.tab_sysinfos, container, false);
        m_viewsHolder = new ViewsHolder(ret);
        AppData.CurrentSysInfos infos = AppData.getInstance().currSysInfos();
        m_viewsHolder.update(infos);
        return ret;
    }

    @Override
    public void onDestroyView() {
        m_viewsHolder = null;
        super.onDestroyView();
    }

    @Override
    public void onDestroy() {
        if (mListener != null)
            mListener.onFragmentDestroy(getClass().getName());
        mListener = null;
        m_viewsHolder = null;
        super.onDestroy();
    }

    @Override
    public void onDetach() {
        super.onDetach();
    }

    public void onSystemInfosChanged(AppData.CurrentSysInfos sysInfos) {
        m_sysInfos = sysInfos;
        if (m_viewsHolder != null)
            m_viewsHolder.update(sysInfos);
    }

    private class ViewsHolder {

        private final View mRoot;
        public TextView m_devRootView;
        public TextView m_modelAndFreqView;
        public TextView m_numCpuView;
        public TextView m_totalRamView;
        public TextView m_freeRamView;
        public TextView m_battPercView;
        public TextView m_battChargingView;
        public ViewGroup m_sysInfosView;
        public ViewGroup m_busyProgressView;

        public ViewsHolder(View root) {
            mRoot = root;
            m_sysInfosView = (ViewGroup) mRoot.findViewById(R.id.sysInfos);
            m_devRootView = (TextView) mRoot.findViewById(R.id.devRoot);
            m_modelAndFreqView = (TextView) mRoot.findViewById(R.id.cpuModelAndFreq);
            m_numCpuView = (TextView) mRoot.findViewById(R.id.numCpu);
            m_totalRamView = (TextView) mRoot.findViewById(R.id.totalRam);
            m_freeRamView = (TextView) mRoot.findViewById(R.id.freeRam);
            m_battPercView = (TextView) mRoot.findViewById(R.id.battPerc);
            m_battChargingView = (TextView) mRoot.findViewById(R.id.battCharging);

            m_busyProgressView = (ViewGroup) mRoot.findViewById(R.id.busyProgress);
        }


        private void update(AppData.CurrentSysInfos sysInfos) {

            if (sysInfos != null) {
                m_devRootView.setText(getString(sysInfos.m_isRoot ? R.string.devRooted : R.string.nodevRooted));
                m_devRootView.setTextColor(sysInfos.m_isRoot ? Color.GREEN : Color.RED);

                m_modelAndFreqView.setText("CPU: " + sysInfos.m_cpuName + ", " + Utils.toHumanReadableFreq(sysInfos.m_cpuMaxFreq * 1000));
                m_numCpuView.setText("Number CPUs: " + sysInfos.m_numCpus);
                m_totalRamView.setText("Device RAM: " + Utils.toHumanReadableSize(sysInfos.m_totalMem * 1024));
                m_freeRamView.setText("Free RAM: " + Utils.toHumanReadableSize(sysInfos.availMem));
                m_battPercView.setText("Battery Level: " + sysInfos.m_batteryLevel);
                m_battChargingView.setText("Charging: " + (sysInfos.m_isCharging ? "Yes" : "No"));

                m_sysInfosView.setVisibility(View.VISIBLE);
                m_busyProgressView.setVisibility(View.GONE);
            }
            else {
                m_busyProgressView.setVisibility(View.VISIBLE);
                m_sysInfosView.setVisibility(View.GONE);
            }
        }

    }


}

