package alarilab.malwaredetector.ui;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import alarilab.malwaredetector.R;
import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.resources.AppProcess;
import alarilab.malwaredetector.utility.Utils;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by Michele on 28/05/16.
 */
public class MalwareAnalyserTab extends ListFragment {

    private LayoutInflater m_inflater = null;
    private ViewsHolder m_viewsHolder = null;
    private MalwareListAdapter m_malwareListAdapter = null;

    private TabListener.OnProcessActionRequestListener mListener;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View ret = inflater.inflate(R.layout.tab_malwareanalyser, container, false);
        m_inflater = inflater;
        m_viewsHolder = new ViewsHolder(ret);
        return ret;
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        setRetainInstance(true);
        if (m_malwareListAdapter == null) {
            m_malwareListAdapter = new MalwareListAdapter(getActivity(), new ArrayList<AppProcess.ProcessData>());
        }
        setListAdapter(m_malwareListAdapter);
    }

    @Override
    public void onDestroyView() {
        m_viewsHolder = null;
        super.onDestroyView();
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mListener = (TabListener.OnProcessActionRequestListener) activity;
            mListener.onFragmentReady(getClass().getName(), this);
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnProcessActionRequestListener");
        }
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }

    @Override
    public void onDestroy() {
        if (mListener != null)
            mListener.onFragmentDestroy(getClass().getName());
        mListener = null;
        super.onDestroy();
    }

    @Override
    public void onDetach() {
        super.onDetach();
    }

    private int malwareCount;
    private int trustedCount;
    private boolean timeout = false;

    public void setTimeout(boolean timeout) {
        this.timeout = timeout;
    }

    public void setCounts(int malwareCount, int trustedCount) {
        this.malwareCount = malwareCount;
        this.trustedCount = trustedCount;
    }

    private class ListItemViewsHolder {
        private final View m_root;
        public TextView m_procName;
        public TextView m_cpuUsage;
        public TextView m_ramUsage;
        int m_pid = 0;

        public ListItemViewsHolder(View root, int pid) {
            m_root = root;
            m_pid = pid;
            m_procName = (TextView) m_root.findViewById(R.id.proc_name);
            m_cpuUsage = (TextView) m_root.findViewById(R.id.cpu_usage);
            m_ramUsage = (TextView) m_root.findViewById(R.id.memory_usage);
        }

        public void updateProcessStats(AppProcess.ProcessData data) {
            m_pid = data.m_pid;
            // update processName
            m_procName.setText(Utils.getAppName(data.m_name) + " (" + data.m_pid + ")");
            // update icon
            m_procName.setCompoundDrawablesWithIntrinsicBounds(data.m_icon, null, null, null);
            // update CPU
            m_cpuUsage.setText("CPU: " + Utils.toHumanReadablePerc(data.m_cpuUsage));
            // update RAM
            m_ramUsage.setText("RAM: " + Utils.toHumanReadableSize(data.m_ramUsage * 1024));
        }
    }

    private class ViewsHolder {

        private final View mRoot;
        public ViewGroup m_busyProgress = null;
        public ViewGroup m_listViewLayout = null;
        public ViewGroup m_procMonDisabled = null;
        public ViewGroup m_trafficLights = null;
        public ViewGroup m_noMalwareFound = null;

        private ImageView m_redLight = null;
        private ImageView m_greenLight = null;

        private TextView m_redLightText = null;
        private TextView m_greenLightText = null;

        public ViewsHolder(View root) {
            mRoot = root;
            m_busyProgress = (ViewGroup) mRoot.findViewById(R.id.busyProgressMalware);
            m_procMonDisabled = (ViewGroup) mRoot.findViewById(R.id.procMonNotEnabled);
            m_trafficLights = (ViewGroup) mRoot.findViewById(R.id.traffic_lights);
            m_listViewLayout = (ViewGroup) mRoot.findViewById(R.id.malwareListLayout);
            m_noMalwareFound = (ViewGroup) mRoot.findViewById(R.id.noMalwareFound);

            m_redLight = (ImageView) m_trafficLights.findViewById(R.id.red_light);
            m_greenLight = (ImageView) m_trafficLights.findViewById(R.id.green_light);

            m_redLightText = (TextView) m_trafficLights.findViewById(R.id.red_light_text);
            m_greenLightText = (TextView) m_trafficLights.findViewById(R.id.green_light_text);
            updateView();
        }

        private String buildText(String appClass, int count) {
            String text;
            switch (count) {
                case 1:
                    text = count + " " + appClass;
                    break;
                default:
                    text = count + " " + appClass + "s";
            }
            return text;
        }

        private void updateView() {

            if (AppData.getInstance().deviceMonitorEnabled()) {
                m_procMonDisabled.setVisibility(View.GONE);
            } else {
                m_procMonDisabled.setVisibility(View.VISIBLE);
                m_busyProgress.setVisibility(View.GONE);
                m_trafficLights.setVisibility(View.GONE);
                return;
            }

            boolean listEmpty = (m_malwareListAdapter == null) ? true : m_malwareListAdapter.getCount() == 0;
            String text;

            if (listEmpty) {
                if (timeout) {
                    // no malware was found: timeout is triggered
                    m_busyProgress.setVisibility(View.GONE);
                    m_trafficLights.setVisibility(View.VISIBLE);

                    m_noMalwareFound.setVisibility(View.VISIBLE);
                    text = buildText("trusted app", trustedCount);
                    m_greenLightText.setText(text);
                    m_greenLight.setImageResource(R.drawable.light_green);
                    text = buildText("threat", malwareCount);
                    m_redLightText.setText(text);
                } else {
                    m_busyProgress.setVisibility(View.VISIBLE);
                    m_trafficLights.setVisibility(View.GONE);
                }
            } else {
                m_busyProgress.setVisibility(View.GONE);
                m_trafficLights.setVisibility(View.VISIBLE);
                // malware was found
                text = buildText("threat", malwareCount);
                m_redLightText.setText(text);
                m_redLight.setImageResource(R.drawable.light_red);
                text = buildText("trusted app", trustedCount);
                m_greenLightText.setText(text);
            }
        }
    }

    public void onMalwareListInfosChanged(List<AppProcess> l_proc) {
        ((MalwareListAdapter) getListAdapter()).onMalwareListChanged(l_proc);
    }

    public void updateViewsHolder() {
        try {
            m_viewsHolder.updateView();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void onTimeout() {
        setTimeout(true);
        updateViewsHolder();
    }

    private class MalwareListAdapter extends ArrayAdapter<AppProcess.ProcessData> {

        public MalwareListAdapter(Context context, List<AppProcess.ProcessData> objects) {
            super(context, R.layout.process_data, objects);
            setNotifyOnChange(true);
        }

        public void onMalwareListChanged(List<AppProcess> l_proc) {
            int numItem = getCount();
            List<AppProcess.ProcessData> toRem = new ArrayList<>();
            boolean found;

            for (int i = 0; i < numItem; ++i) {
                found = false;
                AppProcess.ProcessData data = getItem(i);
                Iterator<AppProcess> iter = l_proc.iterator();

                while (iter.hasNext()) {
                    AppProcess proc = iter.next();
                    if (proc.pid() == data.m_pid) {
                        data.m_ramUsage = proc.ramUsage();
                        data.m_cpuUsage = proc.cpuUsage();
                        data.m_name = proc.processName();
                        data.m_uid = proc.uid();
                        found = true;
                        iter.remove();
                        break;
                    }
                }
                if (!found)
                    toRem.add(data);
            }

            // remove not found processes
            if (!toRem.isEmpty()) {
                for (AppProcess.ProcessData data : toRem)
                    remove(data);
                toRem.clear();
            }
            // add new processes in the listview
            if (!l_proc.isEmpty()) {
                for (AppProcess proc : l_proc)
                    if (proc.isMalware())
                        add(proc.getData());
            }
            notifyDataSetChanged();
            updateViewsHolder();
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View view = convertView;
            ListItemViewsHolder viewsHolder;
            AppProcess.ProcessData proc = this.getItem(position);
            if (view == null) {
                view = m_inflater.inflate(R.layout.malware_data, null);
                viewsHolder = new ListItemViewsHolder(view, proc.m_pid);
                view.setTag(viewsHolder);
            } else {
                viewsHolder = (ListItemViewsHolder) view.getTag();
            }

            if (viewsHolder != null) {
                viewsHolder.updateProcessStats(proc);
            } else {
                L.e("viewsHolder not found for item at position (" + position + ")");
            }

            return view;
        }

    }

}
