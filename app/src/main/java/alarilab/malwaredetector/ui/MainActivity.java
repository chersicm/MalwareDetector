package alarilab.malwaredetector.ui;

//import android.app.ActionBar;

import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;

import java.util.HashMap;
import java.util.List;

import alarilab.malwaredetector.R;
import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.LooperThread;
import alarilab.malwaredetector.core.resources.AppProcess;
import alarilab.malwaredetector.services.DbHandler;
import alarilab.malwaredetector.services.DeviceMonitor;
import alarilab.malwaredetector.services.MalwareAnalyser;
import alarilab.malwaredetector.services.SysCallsMonitor;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.utility.logger.L;


public class MainActivity extends ActionBarActivity implements Handler.Callback, TabListener.OnProcessActionRequestListener {
    private Handler m_handler = null;
    private HashMap<String, Object> m_listFragment;
    private boolean m_restarting = false;

    public static String MY_PROCESS_NAME;

    @Override
    public void onMonitorFlagChanged(int pid, boolean enabled) {
        if (AppData.getInstance().deviceMonitorEnabled()) {
            Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
            if(sig != null) {
                sig.m_signalId = Signal.PROCESS_MONITOR_FLAG_CHANGED;
                Signal.In2<Integer, Integer> in = new Signal.In2<>();
                in.input1 = pid;// Integer.valueOf(pid);
                in.input2 = enabled ? 1 : 0;//Integer.valueOf(enabled ? 1 : 0);
                sig.m_obj = in;
                sig.emit();
            }
        }

    }

    @Override
    public void onFragmentReady(String clsName, Fragment fragment) {

        if (m_listFragment == null)
            m_listFragment = new HashMap<>();

        m_listFragment.put(clsName, fragment);

    }

    @Override
    public void onFragmentDestroy(String clsName) {
        if (m_listFragment != null)
            m_listFragment.remove(clsName);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        m_handler = new Handler(Looper.myLooper(), this);

        loadSettings();
        startServices();

        setContentView(R.layout.activity_main);
        if (savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }

        ActionBar actionBar = getSupportActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
        actionBar.setDisplayShowTitleEnabled(false);

        ActionBar.Tab tab = actionBar.newTab()
                .setText(R.string.processes)
                .setTabListener(new TabListener<ProcessesTab>(
                        this, "processes", ProcessesTab.class));

        actionBar.addTab(tab);
        actionBar.selectTab(tab);

        tab = actionBar.newTab()
                .setText("Detection")
                .setTabListener(new TabListener<MalwareAnalyserTab>(
                        this, "detection", MalwareAnalyserTab.class));
        actionBar.addTab(tab);

        tab = actionBar.newTab()
                .setText(R.string.systemInfos)
                .setTabListener(new TabListener<SystemInfosTab>(
                        this, "systemInfos", SystemInfosTab.class));
        actionBar.addTab(tab);

        tab = actionBar.newTab()
                .setText(R.string.action_settings)
                .setTabListener(new TabListener<PreferencesTab>(
                        this, "settings", PreferencesTab.class));
        actionBar.addTab(tab);

        // store application process name
        MY_PROCESS_NAME = getPackageName();

        //register the application broadcast
        IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
        filter.addAction(Intent.ACTION_SCREEN_OFF);
        BroadcastReceiver mReceiver = new AppBroadCastReceiver();
        registerReceiver(mReceiver, filter);

        initUi(savedInstanceState);
    }

    @Override
    protected void onStop() {
        super.onStop();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (m_listFragment != null)
            m_listFragment.clear();

        if (!m_restarting) {
            stopServices();
        }

        AppData.getInstance().clear(!m_restarting);
    }

    private void stopServices() {
        manageDeviceMonitor(false);
        manageSysCallsMonitor(false);
        manageMalwareAnalyser(false);
        manageDbHandler(false);
    }

    private void loadSettings() {
        AppData.getInstance().init(this);
    }

    private void startServices() {

        // start database handler
        if (AppData.getInstance().dbHandlerEnabled()) {
            manageDbHandler(true);
        }
        else {
            L.w("DbHandler not enabled!");
        }

        // start malware analyser
        if (AppData.getInstance().malwareAnalyserEnabled()) {
            manageMalwareAnalyser(true);
        }
        else {
            L.w("Malware analyser not enabled!");
        }

        if (AppData.getInstance().sysCallMonitorEnabled()) {
            manageSysCallsMonitor(true);
        }
        else {
            L.w("SysCall monitor not enabled!");
        }

        // Start the device monitor
        if (AppData.getInstance().deviceMonitorEnabled()) {
            manageDeviceMonitor(true);
        }
        else {
            L.w("Device monitor not enabled!");
        }

    }

    private void initUi(Bundle savedInstanceState) {}

    public void manageDbHandler(boolean startService) {
        if (startService) {
            try {
                DbHandler.getInstance().startService();
            } catch (LooperThread.StartingException e) {
                L.e("Could not start the Database handler service!");
                e.printStackTrace();
            }
        }
        else if (!DbHandler.isNull()) {
            DbHandler.getInstance().stopService();
        }
    }

    public void manageMalwareAnalyser(boolean startService) {
        if (startService) {
            try {
                MalwareAnalyser.getInstance().startService();
            } catch (LooperThread.StartingException e) {
                L.e("Could not start the Malware Analyser!");
                e.printStackTrace();
            }
        }
        else if (!MalwareAnalyser.isNull()) {
            MalwareAnalyser.getInstance().stopService();
        }
    }

    public void manageSysCallsMonitor(boolean startService) {
        if (startService) {
            //start syscall monitor
            try {
                SysCallsMonitor.getInstance().startService();
            } catch (LooperThread.StartingException e) {
                L.e("Could not start the Malware Analyser!");
                e.printStackTrace();
            }
        }
        else if (!SysCallsMonitor.isNull()) {
            SysCallsMonitor.getInstance().stopService();
        }
    }

    public void manageDeviceMonitor(boolean startService) {
        if (startService) {
            try {
                DeviceMonitor.getInstance().startService();
            } catch (LooperThread.StartingException e) {
                L.e("Could not start the Device monitor!");
                e.printStackTrace();
            }
        }
        else if (!DeviceMonitor.isNull()) {
            DeviceMonitor.getInstance().stopService();
        }
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        m_restarting = false;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        //getMenuInflater().inflate(R.menu.menu_main, menu);
        //return true;
        return false;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        switch (id) {
            case R.id.action_settings: {
                L.d("R.id.action_settings clicked!");
                return true;
            }
            case R.id.processes_list: {
                L.d("R.id.processes_list clicked!");
                return true;
            }
            default:
                return super.onOptionsItemSelected(item);
        }

    }

    @Override
    public boolean handleMessage(Message msg) {

        boolean handled = false;
        switch (msg.what) {
            case Signal.MONITOR_CONFIG_CHANGED: {
                onMonitorConfigChanged(msg);

                // view must be refreshed in MalwareAnalyserTab
                MalwareAnalyserTab malwareTab = (MalwareAnalyserTab) getFragment(MalwareAnalyserTab.class.getName());
                if (malwareTab != null) {
                    malwareTab.updateViewsHolder();
                } else
                    L.w("Fragment MalwareAnalyserTab not yet created!");

                handled = true;
                break;
            }
            case Signal.MONITOR_ALL_PROCESSES_FLAG_CHANGED: {
                ProcessesTab processesTab = (ProcessesTab) getFragment(ProcessesTab.class.getName());
                if (processesTab != null)
                    processesTab.updateProcMonitorFlag(AppData.getInstance().monitorAllProcessesEnabled());
                else
                    L.w("Fragment ProcessesTab not yet created!");

                handled = true;
                break;
            }
            case Signal.PROCESS_LIST_UPDATED: {
                ProcessesTab processesTab = (ProcessesTab) getFragment(ProcessesTab.class.getName());
                if (processesTab != null)
                    processesTab.onProcessListInfosChanged((List<AppProcess>) msg.obj);
                else
                    L.w("Fragment ProcessesTab not yet created!");

                handled = true;
                break;
            }
            case Signal.MALWARE_LIST_UPDATED: {
                MalwareAnalyserTab malwareTab = (MalwareAnalyserTab) getFragment(MalwareAnalyserTab.class.getName());
                if (malwareTab != null) {
                    malwareTab.setCounts(msg.arg1, msg.arg2);
                    malwareTab.onMalwareListInfosChanged((List<AppProcess>) msg.obj);
                } else
                    L.w("Fragment MalwareAnalyserTab not yet created!");

                handled = true;
                break;
            }
            case Signal.MALWARE_TIMEOUT: {
                MalwareAnalyserTab malwareTab = (MalwareAnalyserTab) getFragment(MalwareAnalyserTab.class.getName());
                if (malwareTab != null) {
                    malwareTab.setCounts(msg.arg1, msg.arg2);
                    malwareTab.onTimeout();
                } else
                    L.w("Fragment MalwareAnalyserTab not yet created!");

                handled = true;
                break;
            }
            case Signal.REFRESH_SYSTEM_INFORMATIONS: {
                SystemInfosTab sysInfosTab = (SystemInfosTab) getFragment(SystemInfosTab.class.getName());
                if (sysInfosTab != null)
                    sysInfosTab.onSystemInfosChanged((AppData.CurrentSysInfos) msg.obj);
                else
                    L.w("Fragment SystemInfosTab not yet created!");

                PreferencesTab prefTab = (PreferencesTab) getFragment(PreferencesTab.class.getName());
                if (prefTab != null)
                    prefTab.onSystemInfosChanged((AppData.CurrentSysInfos) msg.obj);
                else
                    L.w("Fragment PreferencesTab not yet created!");
                handled = true;
                break;
            }
            case Signal.SAVE_TABLES_CONTENTS_IN_FILE: {
                ProcessesTab processesTab = (ProcessesTab) getFragment(ProcessesTab.class.getName());
                if (processesTab != null)
                    processesTab.onFinishSaving(msg.arg1);
                else
                    L.w("Fragment ProcessesTab not yet created!");
                handled = true;
                break;
            }
            default: {
                L.w("Message with id: " + msg.what + " not handled!");
            }
        }

        return handled;
    }

    private void onMonitorConfigChanged(Message msg) {

        AppData appData = AppData.getInstance();
        boolean enabled = appData.deviceMonitorEnabled();
        if (enabled ^ DeviceMonitor.getInstance().isRunning()) {
            manageDeviceMonitor(enabled);
        }

        enabled = appData.malwareAnalyserEnabled();
        if (enabled ^ MalwareAnalyser.getInstance().isRunning()) {
            manageMalwareAnalyser(enabled);
        }

        enabled = appData.dbHandlerEnabled();
        if (enabled ^ DbHandler.getInstance().isRunning()) {
            manageDbHandler(enabled);
        }

        enabled = appData.sysCallMonitorEnabled();
        if (enabled ^ SysCallsMonitor.getInstance().isRunning()) {
            manageSysCallsMonitor(enabled);
        }
    }

    Object getFragment(String clsName) {
        Object ret = null;
        if (m_listFragment != null)
            ret = m_listFragment.get(clsName);
        else
            L.w("The requested fragment class [" + clsName + "] is not yet created!");

        return ret;
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        m_restarting = true;

    }

    @Override
    protected void onStart() {
        super.onStart();
        //todo: check if all services are running and eventually restarts them or triggers a refresh event
        L.i("Todo: Check if all services are running and eventually restarts them or triggers an refresh event");
    }

    public Handler handler() {
        return m_handler;
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            return rootView;
        }
    }
}