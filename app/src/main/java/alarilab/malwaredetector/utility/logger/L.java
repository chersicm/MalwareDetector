package alarilab.malwaredetector.utility.logger;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import alarilab.malwaredetector.utility.Utils;

/**
 * Created by vidal on 28.02.15.
 */

@SuppressWarnings("unused")
public class L {

    final static int depth = 4;
    public final static String START = ">>";
    public final static String END = "<<";
    public static void i(String message) {
        if (LogConstant.DEBUG) callLogger("i", LogConstant.DEFAULT_TAG, message);
    }

    @SuppressWarnings("rawtypes")
    public static void callLogger(String methodName, String tag, String message) {

        final StackTraceElement[] ste = Thread.currentThread().getStackTrace();

        try {
            Class cls = Class.forName("android.util.Log");

            Method method = cls.getMethod(methodName, String.class, String.class);
            method.invoke(null, tag, Utils.getThreadSignature() + getTrace(ste) + message);
        } catch (ClassNotFoundException | IllegalArgumentException
                | SecurityException | IllegalAccessException |
                InvocationTargetException | NoSuchMethodException e) {
            e.printStackTrace();
        }
    }

    public static String getTrace(StackTraceElement[] ste) {
        return "[" + getClassName(ste) + "][" + getMethodName(ste) + "][" + getLineNumber(ste) + "] ";
    }

    public static String getClassName(StackTraceElement[] ste) {
        String[] temp = ste[depth].getClassName().split("\\.");
        return temp[temp.length - 1];
    }

    public static String getMethodName(StackTraceElement[] ste) {
        return ste[depth].getMethodName();
    }

    public static int getLineNumber(StackTraceElement[] ste) {
        return ste[depth].getLineNumber();
    }

    public static void i(String message, String tag) {
        if (LogConstant.DEBUG) callLogger("i", tag, message);
    }

    public static void d(String message) {
        if (LogConstant.DEBUG) callLogger("d", LogConstant.DEFAULT_TAG, message);
    }

    public static void d(String message, String tag) {
        if (LogConstant.DEBUG) callLogger("d", tag, message);
    }

    public static void e(String message) {
        if (LogConstant.DEBUG) callLogger("e", LogConstant.DEFAULT_TAG, message);
    }

    public static void e(String message, String tag) {
        if (LogConstant.DEBUG) callLogger("e", tag, message);
    }

    public static void w(String message) {
        if (LogConstant.DEBUG) callLogger("w", LogConstant.DEFAULT_TAG, message);
    }

    public static void w(String message, String tag) {
        if (LogConstant.DEBUG) callLogger("w", tag, message);
    }

    public static void v(String message) {
        if (LogConstant.DEBUG) callLogger("v", LogConstant.DEFAULT_TAG, message);
    }

    public static void v(String message, String tag) {
        if (LogConstant.DEBUG) callLogger("v", tag, message);
    }

    public static String getClassPackage(StackTraceElement[] ste) {
        return ste[depth].getClassName();
    }

}