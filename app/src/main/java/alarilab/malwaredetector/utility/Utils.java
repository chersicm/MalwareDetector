package alarilab.malwaredetector.utility;

/**
 * Created by vidal on 03.03.15.
 */

import android.os.Build;
import android.os.Environment;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import alarilab.malwaredetector.database.DbHelper;
import alarilab.malwaredetector.utility.logger.L;

public final class Utils {
    public final static String SYSTEM_PATH_CPUINFO_MAX_FREQ = "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq";
    public final static String MEMORY_INFO_PATH = "/proc/meminfo";

    private Utils() {
    }

    public static String getDefaultStoragePublicDirectory(String appName) {

        String logicalDir = "";
        String retVal = "";

        if (isExternalStorageWritable()) {
            if (Utils.getAndroidApiLevel() >= 19) {
                logicalDir = Environment.DIRECTORY_DOCUMENTS + "/" + appName;
            }
            else {
                logicalDir = "Documents/" + appName;
            }
            retVal = Environment.getExternalStoragePublicDirectory(logicalDir).getPath();
        }

        return retVal;
    }

    public static boolean isExternalStorageWritable() {
        String state = Environment.getExternalStorageState();
        if (Environment.MEDIA_MOUNTED.equals(state)) {
            return true;
        }
        return false;
    }

    public static int getAndroidApiLevel() {
        return Build.VERSION.SDK_INT;
    }

    public static String getDataBaseName() {
        return DbHelper.DATABASE_NAME;
    }

    public static String getDbDumpFileName() {
        return DbHelper.DB_DUMP_FILE_NAME;
    }

    public static String getThreadSignature() {
        Thread t = Thread.currentThread();
        long l = t.getId();
        String name = t.getName();
        //long p = t.getPriority();
        //String gname = t.getThreadGroup().getName();
        return "[" + name + ": (" + l + ")]";
    }

    public static void killProcess(int pid) {
        android.os.Process.killProcess(pid);
    }

    private static boolean isFileExist(String localPath) {
        File targetFile = new File(localPath);
        return targetFile.exists();
    }


    public static void cmdTest() {

        Process proc = null;
        try {
            String[] command = {"su"};
            /*proc = new ProcessBuilder()
                    .command(command)
                    .redirectErrorStream(true)
                    .start();*/
            proc = Runtime.getRuntime().exec(command);
            //DataOutputStream os = new DataOutputStream(proc.getOutputStream());

            //os.writeBytes("\n"); // simulate enter key press
            //os.flush();

            // read only the standard output stream since we redirect stderr
            StreamReader reader = new StreamReader(proc.getInputStream());
            reader.start();

            DataOutputStream os = new DataOutputStream(proc.getOutputStream());
            os.writeBytes("\n"); // simulate enter key press
            os.flush();
            os.writeBytes("exit $?\n\n");
            os.flush();
            proc.waitFor();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (proc != null)
                proc.destroy();
        }

    }

    public static Process getSuShell(boolean redirectOuput) throws Exception {
        Process ret = null;

        try {
            String[] command = {"su"};
            ret = new ProcessBuilder()
                    .command(command)
                    .redirectErrorStream(redirectOuput)
                    .start();
        } catch (Exception e) {
            throw new Exception("Error: [" + e.getMessage() + "]");
        }

        return ret;
    }

    public static Process getShell(boolean redirectOuput) throws Exception {
        Process ret = null;

        try {
            String[] command = {"sh"};
            ret = new ProcessBuilder()
                    .command(command)
                    .redirectErrorStream(redirectOuput)
                    .start();
        } catch (Exception e) {
            throw new Exception("Error: [" + e.getMessage() + "]");
        }

        return ret;
    }

    public static boolean isRoot() {
        boolean flag = false;
        Process proc = null;
        try {
            proc = Utils.runSuCmd(" ", true);

//
//            // read only the standard output stream since we redirect stderr
//            StreamReader reader = new StreamReader(proc.getInputStream());
//            reader.start();

            proc.waitFor();

            flag = (proc.exitValue() == 0);

        } catch (Exception e) {
            L.e("Failed! Probabily there is no root user! " /*+ e.getMessage()*/);
        } finally {
            if (proc != null)
                proc.destroy();
        }

        return flag;
    }

    public static Process runSuCmd(String cmd, boolean redirectOuput) throws Exception {
        Process ret = null;

        try {
            String[] command = {"su"};
            ret = new ProcessBuilder()
                    .command(command)
                            //.command("su " + cmd)
                    .redirectErrorStream(redirectOuput)
                    .start();

            DataOutputStream os = new DataOutputStream(ret.getOutputStream());
            os.writeBytes(cmd + "\n"); // simulate enter key press
            os.flush();
            os.writeBytes("exit $?\n\n");
            os.flush();

        } catch (Exception e) {

            throw new Exception("Error: [" + e.getMessage() + "]");
        }

        return ret;
    }


    public static <T> T convert(Object from, Class<T> to) {

        // Can we cast?
        if (from != null && to.isAssignableFrom(from.getClass())) {
            return to.cast(from);
        }

        return null;
    }

    public static boolean toBoolean(Integer val) {
        return val == 1;
    }

    public static int setValue(int inVal, int offsetData, int mask, int data) {
        int tmpData = data << offsetData;
        int tmpMask = mask << offsetData;
        return (inVal & (~tmpMask)) | tmpData;
    }

    public static int value(int inVal, int offsetData, int mask) {
        return ((inVal >> offsetData) & mask);
    }

    public static String getAppName(String name) {

        String ret = name;

        if (!name.equals("")) {
            String[] l_name = name.split("\\.");
            if (l_name.length > 0)
                ret = l_name[l_name.length - 1];
        }

        return ret;
    }

    public static String toHumanReadableSize(double num) {
        String ret = "";

        String[] l_unit = new String[]{"B", "KB", "MB", "GB", "TB"};
        int unit = 0;
        for (; unit < l_unit.length && num >= 1024; ++unit) {
            num /= 1024;
        }

        NumberFormat f = NumberFormat.getInstance();
        if (f instanceof DecimalFormat) {
            ((DecimalFormat) f).applyPattern("#.##");
            ret = f.format(num) + l_unit[unit];
        }
        return ret;
    }

    public static String toHumanReadableFreq(double num) {
        String ret = "";

        String[] l_unit = new String[]{"Hz", "KHz", "MHz", "GHz", "THz"};
        int unit = 0;
        for (; unit < l_unit.length && num >= 1000; ++unit) {
            num /= 1000;
        }

        NumberFormat f = NumberFormat.getInstance();
        if (f instanceof DecimalFormat) {
            ((DecimalFormat) f).applyPattern("#.##");
            ret = f.format(num) + l_unit[unit];
        }
        return ret;
    }

    public static String toHumanReadablePerc(float val) {
        String ret = "";
        NumberFormat f = NumberFormat.getInstance();
        if (f instanceof DecimalFormat) {
            f.setMaximumFractionDigits(2);
            f.setMinimumFractionDigits(2);
            ret = f.format(val) + "%";
        }
        return ret;
    }

    public static boolean isNumeric(String str) {
        try {
            double d = Double.parseDouble(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    //returns the max freq in KHz
    public static int getCpuMaxFreq() {
        int ret = 0;
        String readVal = "";
        Process process = null;
        try {
            process = runCmd(new String[]{"/system/bin/cat", SYSTEM_PATH_CPUINFO_MAX_FREQ});
            final StringBuilder sb = new StringBuilder();
            final BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            while ((line = br.readLine()) != null)
                sb.append(line);

            readVal = sb.toString();
            ret = Integer.parseInt(readVal);

        } catch (final NumberFormatException e) {
            L.e("Could not able to convert [" + readVal + "] in Integer. Error Message [" + e.getMessage() + "]");
        } catch (final Exception e) {
            L.e("Failed with error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (process != null)
                process.destroy();
        }

        return ret;

    }

    public static Process runCmd(String[] cmd) throws Exception {
        Process ret = null;

        try {
            ret = new ProcessBuilder()
                    .command(cmd)
                    .redirectErrorStream(true)
                    .start();
        } catch (Exception e) {
            throw new Exception(e);
        }

        return ret;
    }

    //returns the total ram size in kB
    public static long getTotalRamSize() {
        RandomAccessFile reader;
        String load;
        long ret = 0;
        try {
            reader = new RandomAccessFile(MEMORY_INFO_PATH, "r");
            String value = "";
            try {
                load = reader.readLine(); // we just need the first line
                Pattern p = Pattern.compile("(\\d+)");
                Matcher m = p.matcher(load);

                if (m.find()) {
                    value = m.group(1);
                }

                ret = Long.parseLong(value);
            } catch (NumberFormatException e) {
                L.e("Could not able to convert [" + value + "] in Long. Error Message [" + e.getMessage() + "]");
            } finally {
                reader.close();
            }
        } catch (Exception e) {
            L.e("Failed with error: " + e.getMessage());
            e.printStackTrace();
        }

        return ret;
    }

    public static class StreamReader extends Thread {
        InputStream m_inStream;


        public StreamReader(InputStream inStream) {
            m_inStream = inStream;
        }

        public void run() {
            try {
                InputStreamReader isr = new InputStreamReader(m_inStream);
                BufferedReader br = new BufferedReader(isr);
                String line;
                while ((line = br.readLine()) != null)
                    processLine(line);

            } catch (IOException ioe) {
                L.e("Failed with error: " + ioe.getMessage());
                ioe.printStackTrace();
            }

            L.d("Exiting from StreamReader!");
        }

        public void processLine(final String line) {
            System.out.println(line);
        }
    }

}