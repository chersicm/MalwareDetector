package alarilab.malwaredetector.utility.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.services.SysCallsMonitor;
import alarilab.malwaredetector.shared.Signal;

/**
 * Created by vidal on 18.03.15.
 */
public class SyscallsTester {
    public static final boolean DEBUG = false;
    protected Timer m_startTimer = null;
    String[] m_sysCalls = new String[]{
            "1426683858.233710 epoll_pwait(19, {}, 16, 0, NULL, 8) = 0",
            "1426683858.235338 clock_gettime(CLOCK_MONOTONIC, {1700, 175807130}) = 0",
            "1426683858.238546 futex(0xaef818e8, FUTEX_WAKE, 1) = 1",
            "1426683859.239358 futex(0xaefcb110, FUTEX_WAKE, 1) = 1",
            "1426683859.261340 futex(0xb1a14100, FUTEX_WAKE, 1) = 1",
            "1426683859.280381 futex(0xb1a14128, FUTEX_WAKE, 1) = 1",
            "1426683860.281131 futex(0xb1a14100, FUTEX_WAKE, 1) = 1",
            "1426683861.285783 futex(0xb5055cf8, FUTEX_WAKE, 1) = 0",
            "1426683862.286865 clock_gettime(CLOCK_REALTIME, {1426683858, 287035640}) = 0",
            "1426683863.287525 writev(3, [{\"\\0\", 1}, {\"\\v\\5\", 2}, {\"\\322w\\tU\\370\\320\\33\\21\", 8}, {\"\\3\", 1}, {\"alarilab.malwaremonitor\\0\", 24}, {\"[main: (1)][ProcessesTab$Process\"..., 98}], 6) = 134",
            "1426683863.291547 clock_gettime(CLOCK_REALTIME, {1426683858, 291984732}) = 0",
            "1426683863.292502 writev(3, [{\"\\0\", 1}, {\"\\v\\5\", 2}, {\"\\322w\\tU\\\\Ug\\21\", 8}, {\"\\3\", 1}, {\"alarilab.malwaremonitor\\0\", 24}, {\"[main: (1)][ProcessesTab$Process\"..., 68}], 6) = 104",
            "1426683870.320780 futex(0xb5055d20, FUTEX_CMP_REQUEUE, 0, 2147483647, 0xb5055cf8, 47) = 1",
            "1426683870.321606 futex(0xb5055cf8, FUTEX_WAKE, 1) = 1",
            "1426683870.323461 futex(0xb504f4a0, FUTEX_WAKE, 1) = 0",
            "1426683880.324174 futex(0xb501b3d8, FUTEX_WAIT, 15, NULL) = 0",
            "1426683880.330671 futex(0xb504f4a0, FUTEX_WAKE, 1) = 1",
            "1426683880.336508 getuid32()            = 10053",
            "1426683861.337306 epoll_pwait(19, {}, 16, 0, NULL, 8) = 0",
            "1426683862.338008 clock_gettime(CLOCK_MONOTONIC, {1700, 278473982}) = 0",
            "1426683880.338760 clock_gettime(CLOCK_MONOTONIC, {1700, 279219705}) = 0",
            "1426683890.339400 clock_gettime(CLOCK_MONOTONIC, {1700, 279856731}) = 0",
            "1426683890.368042 recvfrom(38, 0xb5033810, 2264, 64, 0, 0) = -1 EAGAIN (Try again)"
    };

    String[] m_sysCallsMultiProc = new String[]{
            "[PID 333] 1426683858.233710 epoll_pwait(19, {}, 16, 0, NULL, 8) = 0",
            "[PID 333] 1426683859.235338 clock_gettime(CLOCK_MONOTONIC, {1700, 175807130}) = 0",
            "[PID 254] 1426683858.238546 futex(0xaef818e8, FUTEX_WAKE, 1) = 1",
            "[PID 254] 1426683858.239358 futex(0xaefcb110, FUTEX_WAKE, 1) = 1",
            "[PID 254] 1426683858.261340 futex(0xb1a14100, FUTEX_WAKE, 1) = 1",
            "[PID 254] 1426683859.280381 futex(0xb1a14128, FUTEX_WAKE, 1) = 1",
            "[PID 588] 1426683858.281131 futex(0xb1a14100, FUTEX_WAKE, 1) = 1",
            "[PID 588] 1426683858.285783 futex(0xb5055cf8, FUTEX_WAKE, 1) = 0",
            "[PID 588] 1426683860.286865 clock_gettime(CLOCK_REALTIME, {1426683858, 287035640}) = 0",
            "[PID 333] 1426683860.287525 writev(3, [{\"\\0\", 1}, {\"\\v\\5\", 2}, {\"\\322w\\tU\\370\\320\\33\\21\", 8}, {\"\\3\", 1}, {\"alarilab.malwaremonitor\\0\", 24}, {\"[main: (1)][ProcessesTab$Process\"..., 98}], 6) = 134",
            "[PID 333] 1426683861.291547 clock_gettime(CLOCK_REALTIME, {1426683858, 291984732}) = 0",
            "[PID 254] 1426683860.292502 writev(3, [{\"\\0\", 1}, {\"\\v\\5\", 2}, {\"\\322w\\tU\\\\Ug\\21\", 8}, {\"\\3\", 1}, {\"alarilab.malwaremonitor\\0\", 24}, {\"[main: (1)][ProcessesTab$Process\"..., 68}], 6) = 104",
            "[PID 588] 1426683860.320780 futex(0xb5055d20, FUTEX_CMP_REQUEUE, 0, 2147483647, 0xb5055cf8, 47) = 1",
            "[PID 254] 1426683862.321606 futex(0xb5055cf8, FUTEX_WAKE, 1) = 1",
            "[PID 254] 1426683862.323461 futex(0xb504f4a0, FUTEX_WAKE, 1) = 0",
            "[PID 588] 1426683864.324174 futex(0xb501b3d8, FUTEX_WAIT, 15, NULL) = 0",
            "[PID 588] 1426683864.330671 futex(0xb504f4a0, FUTEX_WAKE, 1) = 1",
            "[PID 333] 1426683865.336508 getuid32()            = 10053",
            "[PID 333] 1426683865.337306 epoll_pwait(19, {}, 16, 0, NULL, 8) = 0",
            "[PID 259] 1426683870.338008 clock_gettime(CLOCK_MONOTONIC, {1700, 278473982}) = 0",
            "[PID 259] 1426683870.338760 clock_gettime(CLOCK_MONOTONIC, {1700, 279219705}) = 0",
            "[PID 588] 1426683880.339400 clock_gettime(CLOCK_MONOTONIC, {1700, 279856731}) = 0",
            "[PID 254] 1426683880.368042 recvfrom(38, 0xb5033810, 2264, 64, 0, 0) = -1 EAGAIN (Try again)"
    };
    private boolean m_multiProcTest = true;

    public SyscallsTester() {
        m_startTimer = new Timer(getClass().getName() + "_startTimerThread", false);
        m_startTimer.schedule(new TestTask(), 60000);
    }

    public void clear() {
        if (m_startTimer != null) {
            m_startTimer.cancel();
            m_startTimer.purge();
            m_startTimer = null;
        }
    }

    public List<String> getTracedProc() {
        List<String> arr;
        if (m_multiProcTest) {
            arr = new ArrayList<String>();
            arr.add("254");
            arr.add("588");
            arr.add("333");
        }
        else {
            arr = new ArrayList<String>();
            arr.add("254");
        }
        return arr;
    }

    private class TestTask extends TimerTask {
        @Override
        public void run() {

            try {
                int i = 0;
                String[] l_traces;
                if (m_multiProcTest) {
                    l_traces = m_sysCallsMultiProc;
                }
                else {
                    l_traces = m_sysCalls;
                }

                while (i < l_traces.length && (!SysCallsMonitor.isNull() && AppData.getInstance().sysCallsStatEnabled()
                        && AppData.getInstance().sysCallMonitorEnabled())) {
                    Signal sig =  AppData.obtainSignal(AppData.SYSCALLSSERVICE);//new Utils.Signal(SysCallsMonitor.getInstance().handler());
                    if(sig != null) {
                        sig.m_signalId = Signal.NEW_SYSCALLS_AVAILABLE;
                        sig.m_obj = l_traces[i];
                        sig.emit();
                    }
                    Thread.sleep(100);
                    ++i;
                }

                // if(i == l_traces.length)
                //     m_startTimer.schedule(new TestTask(),10000);

            } catch (InterruptedException e) {
                e.printStackTrace();
            }


        }
    }

}
