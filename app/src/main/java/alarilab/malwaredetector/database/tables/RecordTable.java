package alarilab.malwaredetector.database.tables;

import android.content.ContentValues;
import android.database.Cursor;
import android.provider.BaseColumns;

import java.util.ArrayList;
import java.util.List;

import alarilab.malwaredetector.shared.StatisticsData;

/**
 * Created by Michele on 19/06/16.
 */
public class RecordTable implements BaseTable {

    public static final String TABLE_NAME = "records";
    private final String SQL_CREATE = "CREATE TABLE " + TABLE_NAME + " (" +
            RecordEntry._ID + PRIMARY_KEY_TYPE + COMMA_SEP +
            RecordEntry.PID + INT_TYPE + COMMA_SEP +
            RecordEntry.TIMESTAMP + TIMESTAMP_TYPE + COMMA_SEP +
//            RecordEntry.CREATIONTIMESTAMP + TIMESTAMP_TYPE + COMMA_SEP +
            RecordEntry.CLASS + INT_TYPE + COMMA_SEP +
            RecordEntry.DEX_MMAP_PSS + INT_TYPE + COMMA_SEP +
            RecordEntry.DEX_MMAP_PRIVATE_DIRTY + INT_TYPE + COMMA_SEP +
            RecordEntry.TTF_MMAP_PSS + INT_TYPE + COMMA_SEP +
            RecordEntry.OTHER_MMAP_PRIVATE_DIRTY + INT_TYPE + COMMA_SEP +
            RecordEntry.JAR_MMAP_PSS + INT_TYPE + COMMA_SEP +
            RecordEntry.CPU_TOTAL + FLOAT_TYPE +
            " );";

    private final String SQL_DELETE = "DROP TABLE IF EXISTS " + TABLE_NAME;
    protected int m_maxRowsAllowed = 24 * 60 * 60 * 1000; //1000 max num rows per sec

    @Override
    public String tableName() {
        return TABLE_NAME;
    }

    @Override
    public String createQuery() {
        return SQL_CREATE;
    }

    @Override
    public String deleteQuery() {
        return SQL_DELETE;
    }

    @Override
    public ContentValues values(StatisticsData data) {
        ContentValues content = new ContentValues();
        content.put(RecordEntry.PID, data.pid());
        content.put(RecordEntry.TIMESTAMP, data.m_timeStamp);
//        content.put(RecordEntry.CREATIONTIMESTAMP, data.m_creationTimeStamp);
        content.put(RecordEntry.CLASS, data.getRecordClass());
        Number[] record = data.getRecord();
        content.put(RecordEntry.DEX_MMAP_PSS, (int) record[StatisticsData.dexmmapPSS]);
        content.put(RecordEntry.DEX_MMAP_PRIVATE_DIRTY, (int) record[StatisticsData.dexmmapPrivateDirty]);
        content.put(RecordEntry.TTF_MMAP_PSS, (int) record[StatisticsData.ttfmmapPSS]);
        content.put(RecordEntry.OTHER_MMAP_PRIVATE_DIRTY, (int) record[StatisticsData.OthermmapPrivateDirty]);
        content.put(RecordEntry.JAR_MMAP_PSS, (int) record[StatisticsData.jarmmapPSS]);
        content.put(RecordEntry.CPU_TOTAL, (double) record[StatisticsData.CPUtotal]);
        return content;
    }

    @Override
    public String toFileFormat(StatisticsData data) {
        Number[] record = data.getRecord();
        return TABLE_NAME + FIELD_SEPARATOR +
                data.pid() + FIELD_SEPARATOR +
                data.m_timeStamp + FIELD_SEPARATOR +
                data.getRecordClass() + FIELD_SEPARATOR +
                record[StatisticsData.dexmmapPSS] + FIELD_SEPARATOR +
                record[StatisticsData.dexmmapPrivateDirty] + FIELD_SEPARATOR +
                record[StatisticsData.ttfmmapPSS] + FIELD_SEPARATOR +
                record[StatisticsData.OthermmapPrivateDirty] + FIELD_SEPARATOR +
                record[StatisticsData.jarmmapPSS] + FIELD_SEPARATOR +
                record[StatisticsData.CPUtotal] + FIELD_SEPARATOR;
//                + data.m_creationTimeStamp;
    }

    @Override
    public String defaultSortOrder() {
        return RecordEntry._ID + " ASC";
    }

    @Override
    public String[] projection() {

        String[] proj = new String[]{
                RecordEntry.PID,
                RecordEntry.TIMESTAMP,
//                RecordEntry.CREATIONTIMESTAMP,
                RecordEntry.CLASS,
                RecordEntry.DEX_MMAP_PSS,
                RecordEntry.DEX_MMAP_PRIVATE_DIRTY,
                RecordEntry.TTF_MMAP_PSS,
                RecordEntry.OTHER_MMAP_PRIVATE_DIRTY,
                RecordEntry.JAR_MMAP_PSS,
                RecordEntry.CPU_TOTAL
        };

        return proj;
    }

    @Override
    public List<StatisticsData> cursorDataToStats(Cursor cursor) {
        List<StatisticsData> ret = new ArrayList<>();
        if (cursor != null && cursor.moveToFirst()) {
            while (!cursor.isAfterLast()) {
                StatisticsData stat = new StatisticsData(-1);
                stat.m_tableName = TABLE_NAME;
                stat.setPid(cursor.getInt(
                        cursor.getColumnIndexOrThrow(RecordEntry.PID)));
                stat.m_timeStamp = cursor.getLong(
                        cursor.getColumnIndexOrThrow(RecordEntry.TIMESTAMP));
//                stat.m_creationTimeStamp = cursor.getLong(
//                        cursor.getColumnIndexOrThrow(RecordEntry.CREATIONTIMESTAMP));
                // reconstruct record
                stat.setRecordClass(cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.CLASS)));
                int[] record = new int[]{
                        cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.DEX_MMAP_PSS)),
                        cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.DEX_MMAP_PRIVATE_DIRTY)),
                        cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.TTF_MMAP_PSS)),
                        cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.OTHER_MMAP_PRIVATE_DIRTY)),
                        cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.JAR_MMAP_PSS))
                };
                double CPUusage = cursor.getDouble(cursor.getColumnIndexOrThrow(RecordEntry.CPU_TOTAL));
                stat.createRecord(record);
                stat.addCPU(CPUusage);

                ret.add(stat);
                cursor.moveToNext();
            }
        }

        return ret;
    }

    @Override
    public StatisticsData toStatData(Cursor cursor) {
        StatisticsData stat = new StatisticsData(-1);
        stat.m_tableName = TABLE_NAME;
        stat.setPid(cursor.getInt(
                cursor.getColumnIndexOrThrow(RecordEntry.PID)));
        stat.m_timeStamp = cursor.getLong(
                cursor.getColumnIndexOrThrow(RecordEntry.TIMESTAMP));
//        stat.m_creationTimeStamp = cursor.getLong(
//                cursor.getColumnIndexOrThrow(RecordEntry.CREATIONTIMESTAMP));
        // reconstruct record
        stat.setRecordClass(cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.CLASS)));
        int[] record = new int[]{
                cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.DEX_MMAP_PSS)),
                cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.DEX_MMAP_PRIVATE_DIRTY)),
                cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.TTF_MMAP_PSS)),
                cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.OTHER_MMAP_PRIVATE_DIRTY)),
                cursor.getInt(cursor.getColumnIndexOrThrow(RecordEntry.JAR_MMAP_PSS))
        };
        double CPUusage = cursor.getDouble(cursor.getColumnIndexOrThrow(RecordEntry.CPU_TOTAL));
        stat.createRecord(record);
        stat.addCPU(CPUusage);

        return stat;
    }

    @Override
    public int getMaxNumRows() {
        return m_maxRowsAllowed;
    }

    public static abstract class RecordEntry implements BaseColumns {
        public static final String PID = "pid";
        public static final String TIMESTAMP = "timeStamp";
//        public static final String CREATIONTIMESTAMP = "creationTimeStamp";
        public static final String CLASS = "class";
        public static final String DEX_MMAP_PSS = "dexmmapPSS";
        public static final String DEX_MMAP_PRIVATE_DIRTY = "dexmmapPrivateDirty";
        public static final String TTF_MMAP_PSS = "ttfmmapPSS";
        public static final String OTHER_MMAP_PRIVATE_DIRTY = "OthermmapPrivateDirty";
        public static final String JAR_MMAP_PSS = "jarmmapPSS";
        public static final String CPU_TOTAL = "CPUtotal";
    }
}
