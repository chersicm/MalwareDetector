package alarilab.malwaredetector.database.tables;

import android.content.ContentValues;
import android.database.Cursor;
import android.provider.BaseColumns;

import java.util.ArrayList;
import java.util.List;

import alarilab.malwaredetector.shared.StatisticsData;

/**
 * Created by vidal on 04.03.15.
 */

public final class CpuUsageTable implements BaseTable {

    public static final String TABLE_NAME = "CpuUsage";
    private final String SQL_CREATE = "CREATE TABLE " + TABLE_NAME + " (" +
            FieldEntry._ID + PRIMARY_KEY_TYPE + COMMA_SEP +
            FieldEntry.PID + INT_TYPE + COMMA_SEP +
            FieldEntry.PERCENTAGE + FLOAT_TYPE + COMMA_SEP +
            FieldEntry.TIMESTAMP + TIMESTAMP_TYPE + COMMA_SEP +
            FieldEntry.CREATIONTIMESTAMP + TIMESTAMP_TYPE +
            " );";

    private final String SQL_DELETE = "DROP TABLE IF EXISTS " + TABLE_NAME;
    protected int m_maxRowsAllowed = 24*60*60*1000; //1000 max num rows per sec

    public CpuUsageTable() {
    }

    @Override
    public String tableName() {
        return TABLE_NAME;
    }

    @Override
    public String createQuery() {
        return SQL_CREATE;
    }

    @Override
    public StatisticsData toStatData(Cursor cursor) {
        StatisticsData stat = new StatisticsData(-1);
        stat.m_tableName = TABLE_NAME;
        stat.setPid(cursor.getInt(
                cursor.getColumnIndexOrThrow(FieldEntry.PID)));
        stat.m_percentage = cursor.getFloat(
                cursor.getColumnIndexOrThrow(FieldEntry.PERCENTAGE));
        stat.m_timeStamp = cursor.getLong(
                cursor.getColumnIndexOrThrow(FieldEntry.TIMESTAMP));
        stat.m_creationTimeStamp = cursor.getLong(
                cursor.getColumnIndexOrThrow(FieldEntry.CREATIONTIMESTAMP));
        return stat;
    }

    @Override
    public String deleteQuery() {
        return SQL_DELETE;
    }

    @Override
    public ContentValues values(StatisticsData data) {
        ContentValues content = new ContentValues();
        content.put(FieldEntry.PID, data.pid());
        content.put(FieldEntry.TIMESTAMP, data.m_timeStamp);
        content.put(FieldEntry.PERCENTAGE, data.m_percentage);
        content.put(FieldEntry.CREATIONTIMESTAMP, data.m_creationTimeStamp);
        return content;
    }

    @Override
    public String toFileFormat(StatisticsData data) {
        return TABLE_NAME + FIELD_SEPARATOR + data.pid() + FIELD_SEPARATOR + data.m_timeStamp
                + FIELD_SEPARATOR + data.m_percentage + FIELD_SEPARATOR + data.m_creationTimeStamp;
    }

    @Override
    public String defaultSortOrder() {
        return FieldEntry._ID + " ASC";
    }

    @Override
    public String[] projection() {

        String[] proj = new String[]{
                FieldEntry.PID,
                FieldEntry.TIMESTAMP,
                FieldEntry.PERCENTAGE,
                FieldEntry.CREATIONTIMESTAMP

        };

        return proj;
    }

    @Override
    public List<StatisticsData> cursorDataToStats(Cursor cursor) {

        List<StatisticsData> ret = new ArrayList<>();
        if (cursor != null && cursor.moveToFirst()) {
            while (!cursor.isAfterLast()) {
                StatisticsData stat = new StatisticsData(-1);
                stat.m_tableName = TABLE_NAME;
                stat.setPid(cursor.getInt(
                        cursor.getColumnIndexOrThrow(FieldEntry.PID)));
                stat.m_percentage = cursor.getFloat(
                        cursor.getColumnIndexOrThrow(FieldEntry.PERCENTAGE));
                stat.m_timeStamp = cursor.getLong(
                        cursor.getColumnIndexOrThrow(FieldEntry.TIMESTAMP));
                stat.m_creationTimeStamp = cursor.getLong(
                        cursor.getColumnIndexOrThrow(FieldEntry.CREATIONTIMESTAMP));
                ret.add(stat);
                cursor.moveToNext();
            }
        }

        return ret;
    }

    @Override
    public int getMaxNumRows() {
        return m_maxRowsAllowed;

    }

    /* Table contents */
    public static abstract class FieldEntry implements BaseColumns {
        public static final String PID = "pid";
        public static final String TIMESTAMP = "timeStamp";
        public static final String PERCENTAGE = "percentage";
        public static final String CREATIONTIMESTAMP = "creationTimeStamp";

    }

}