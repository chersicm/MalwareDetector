package alarilab.malwaredetector.database.tables;

import android.content.ContentValues;
import android.database.Cursor;
import android.provider.BaseColumns;

import java.util.ArrayList;
import java.util.List;

import alarilab.malwaredetector.shared.StatisticsData;

public final class SysCallsStatisticsTable implements BaseTable {

    public static final String TABLE_NAME = "SysCallStatistics";
    private final String SQL_CREATE = "CREATE TABLE " + TABLE_NAME + " (" +
            FieldEntry._ID + PRIMARY_KEY_TYPE + COMMA_SEP +
            FieldEntry.PID + INT_TYPE + COMMA_SEP +
            FieldEntry.NUMCALLS + INT_TYPE + COMMA_SEP +
            FieldEntry.TIMESTAMP + TIMESTAMP_TYPE + COMMA_SEP +
            FieldEntry.CREATIONTIMESTAMP + TIMESTAMP_TYPE +
            " );";

    private final String SQL_DELETE = "DROP TABLE IF EXISTS " + TABLE_NAME;

    @Override
    public StatisticsData toStatData(Cursor cursor) {
        StatisticsData stat = new StatisticsData(-1);
        stat.m_tableName = TABLE_NAME;
        stat.setPid(cursor.getInt(
                cursor.getColumnIndexOrThrow(FieldEntry.PID)));
        stat.m_numCallsPerSec = cursor.getInt(
                cursor.getColumnIndexOrThrow(FieldEntry.NUMCALLS));
        stat.m_timeStamp = cursor.getLong(
                cursor.getColumnIndexOrThrow(FieldEntry.TIMESTAMP));
        stat.m_creationTimeStamp = cursor.getLong(
                cursor.getColumnIndexOrThrow(FieldEntry.CREATIONTIMESTAMP));
        return stat;
    }

    protected int m_maxRowsAllowed = 24*60*60*2000; //2000 max num rows per sec

    public SysCallsStatisticsTable() {
    }

    @Override
    public String tableName() {
        return TABLE_NAME;
    }

    @Override
    public String createQuery() {
        return SQL_CREATE;
    }

    @Override
    public String deleteQuery() {
        return SQL_DELETE;
    }

    @Override
    public ContentValues values(StatisticsData data) {
        ContentValues content = new ContentValues();
        content.put(FieldEntry.PID, data.pid());
        content.put(FieldEntry.TIMESTAMP, data.m_timeStamp);
        content.put(FieldEntry.NUMCALLS, data.m_numCallsPerSec);
        content.put(FieldEntry.CREATIONTIMESTAMP, data.m_creationTimeStamp);
        return content;
    }

    @Override
    public String toFileFormat(StatisticsData data) {
        return TABLE_NAME +FIELD_SEPARATOR + data.pid() + FIELD_SEPARATOR + data.m_timeStamp
                + FIELD_SEPARATOR + data.m_numCallsPerSec + FIELD_SEPARATOR + data.m_creationTimeStamp;
    }

    @Override
    public String defaultSortOrder() {
        return FieldEntry._ID + " ASC";
    }

    @Override
    public String[] projection() {

        String[] proj = new String[]{
                FieldEntry.PID,
                FieldEntry.TIMESTAMP,
                FieldEntry.NUMCALLS,
                FieldEntry.CREATIONTIMESTAMP

        };

        return proj;
    }

    @Override
    public List<StatisticsData> cursorDataToStats(Cursor cursor) {

        List<StatisticsData> ret = new ArrayList<>();
        if (cursor != null) {
            if (cursor.moveToFirst()) {
                while (!cursor.isAfterLast()) {
                    ret.add(toStatData(cursor));
                    cursor.moveToNext();
                }
            }
        }

        return ret;
    }

    @Override
    public int getMaxNumRows() {
        return m_maxRowsAllowed;
    }

    /* Table contents */
    public static abstract class FieldEntry implements BaseColumns {

        public static final String PID = "pid";
        public static final String NUMCALLS = "numCalls";
        public static final String TIMESTAMP = "timeStamp";
        public static final String CREATIONTIMESTAMP = "creationTimeStamp";

    }
}