package alarilab.malwaredetector.detection;

import android.util.Log;

import java.util.Arrays;
import java.util.LinkedList;

/**
 * Created by Michele on 24/05/16.
 */
public class ApplicationEvaluator {

    int pid; // process id

    private final int WINDOW_LENGTH = 5;
    private final double THRESHOLD = 0.85;
    private final int CHECKS = 15;

    private int positive = 0; // count positive results

    private LinkedList<Integer> window;

    public ApplicationEvaluator(int pid) {
        this.pid = pid;
        window = new LinkedList<>();
    }

    // check if the current window is full
    public boolean addCheckWindowFull(int record_eval) {

        window.add(record_eval);
        if (window.size() > WINDOW_LENGTH)
            window.removeFirst();

        if (window.size() < WINDOW_LENGTH)
            printWindowNotFull();

        return window.size() == WINDOW_LENGTH;
    }

    // window is full: return true if malware is found, false otherwise
    public boolean evaluate() {

        int mal_count = 0; // count malware entries
        for (int i = 0; i < WINDOW_LENGTH; i++) {
            if (window.get(i) == 0)
                mal_count++;
        }

        double ratio = (double) mal_count / WINDOW_LENGTH;
        if (ratio >= THRESHOLD) { // window is malware
            positive++;
            printWindow();
            window.clear(); // slide by window length = clear window
        } else {
            printWindow();
        }

        boolean malware = positive == CHECKS;
        if (malware)
            positive = 0; // reset count of positive results

        return malware;
    }

    private void printRatio(int mal_count, double ratio) {
        Log.d("[pid=" + pid + "] ratio", "" + mal_count + "/" + WINDOW_LENGTH + "=" + ratio);
    }

    private void printWindowNotFull() {
        Log.d("window [PID=" + pid + "]", "window not full: " + window.size());
    }

    private void printWindow() {
        Log.d("window [PID=" + pid + "]", Arrays.toString(window.toArray()) + " | positive = " + positive);
    }
}
