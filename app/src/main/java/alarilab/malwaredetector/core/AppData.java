package alarilab.malwaredetector.core;

import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.os.BatteryManager;
import android.os.Handler;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import alarilab.malwaredetector.core.resources.ResourceUsage;
import alarilab.malwaredetector.database.tables.BatteryUsageTable;
import alarilab.malwaredetector.database.tables.ScreenUsageTable;
import alarilab.malwaredetector.services.DbHandler;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.shared.StatisticsData;
import alarilab.malwaredetector.ui.MainActivity;
import alarilab.malwaredetector.utility.Utils;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 01.03.15.
 */
public class AppData {
    public static int m_genericRefreshPeriod = 3000;
    private static AppData m_instance = null;
    public static final int MAINACTIVITYSERVICE = 1;
    public static final int DEVICEMONITORSERVICE = 2;
    public static final int DBHANDLERSERVICE = 3;
    public static final int MALWAREANALYSERSERVICE = 4;
    public static final int SYSCALLSSERVICE = 5;
    public static final int SYSCALLSTATSSERVICE = 6;

    private String m_procName = "";
    private String m_packageName = "";
    private Context m_appContext = null;
    private SharedPreferences m_preferences = null;
    private Settings m_settings = null;
    private boolean m_isRoot = false;
    private Handler m_mainHandler = null;
    private boolean m_screenOn = false;
    private Timer m_refresDevInfosTimer = null;
    private CurrentSysInfos m_currSysInfos = null;
    private static HashMap<Integer, Handler> m_listServices = new HashMap<>();
    private static  final Object m_serviceLock = new Object(),
            m_cachedStatsLocker = new Object();
    private List<StatisticsData> m_cachedStats = new ArrayList<>();

    private AppData() {
    }

    public synchronized static AppData getInstance() {
        if (m_instance == null)
            m_instance = new AppData();
        return m_instance;
    }

    public static void registerService(int idService, Handler srvHandler)
    {
        synchronized (m_serviceLock) {
            if (srvHandler != null) {
                if (!m_listServices.containsKey(idService)) {
                    m_listServices.put(idService, srvHandler);
                }
                else {
                    L.w("Already registered!");
                }
            }
        }
    }

    public static void deregisterService(int idService)
    {
        synchronized (m_serviceLock) {
            if (m_listServices.containsKey(idService)) {
                m_listServices.remove(idService);
            }
        }
    }

    public void cachedStatistics(List<StatisticsData> lStats)
    {
        synchronized (m_cachedStatsLocker) {
            m_cachedStats.addAll(lStats);
        }
    }

    public static Handler getServiceHandler(int idService)
    {
        Handler ret;

        synchronized (m_serviceLock) {
            ret = m_listServices.get(idService);
        }

        return ret;
    }

    public static Signal obtainSignal(int destIdService)
    {
        Signal signal = null;
        Handler handler = getServiceHandler(destIdService);
        if(handler != null)
        {
            signal = new Signal(handler);
        }
        else
        {
            L.e("Handler for service id (" + destIdService + ") not found!");
        }
        return signal;
    }

    public synchronized CurrentSysInfos currSysInfos() {
        return m_currSysInfos;
    }

    public synchronized void setCurrSysInfos(CurrentSysInfos infos) {
        m_currSysInfos = infos;
        Signal sig = new Signal(m_mainHandler);
        sig.m_signalId = Signal.REFRESH_SYSTEM_INFORMATIONS;
        sig.m_obj = infos;
        sig.emit();
    }

    public boolean isScreenOn() {
        return m_screenOn;
    }

    public void setScreenOn(boolean val) {
        this.m_screenOn = val;
        if(displayMonitorEnabled()) {
            StatisticsData stat = new StatisticsData(0);
            stat.m_tableName = ScreenUsageTable.TABLE_NAME;
            stat.m_screenStat = val ? 1 : 0;
            stat.m_timeStamp = (new Date()).getTime();
            List<StatisticsData> stats = new ArrayList<>();
            stats.add(stat);
            DbHandler.getInstance().saveData(stats, true);
        }
    }

    public void setIsRoot(boolean val) {
        m_isRoot = val;
    }

    public boolean isDeviceCharging() {
        boolean ret;
        IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
        Intent batteryStatus = m_appContext.registerReceiver(null, ifilter);

        // Are we charging / charged?
        int status = batteryStatus != null ? batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1) : 0;
        ret = (status == BatteryManager.BATTERY_STATUS_CHARGING) ||
                (status == BatteryManager.BATTERY_STATUS_FULL);

        return ret;
    }

    public float currBatteryLevel() {
        IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
        Intent batteryStatus = m_appContext.registerReceiver(null, ifilter);
        int level = batteryStatus != null ? batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) : 0;
        int scale = (batteryStatus != null) ? batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1) : 1;
        return level / (float) scale;
    }

    public boolean isRoot() {
        return m_isRoot;
    }

    public String getProcName() {
        return m_procName;
    }

    public String getPackageName() {
        return m_packageName;
    }

    public String getDatabasePath() {
        return (m_settings != null) ? m_settings.getDatabasePath() : "";
    }

    public synchronized Context appContext() {
        return m_appContext;
    }

    public synchronized Handler mainHandler() {
        return m_mainHandler;
    }

    public synchronized void init(MainActivity activity) {
        if (activity != null) {
            m_appContext = activity.getApplicationContext();

            if (m_preferences == null)
                m_preferences = activity.getPreferences(Context.MODE_PRIVATE);

            if (m_mainHandler == null)
                m_mainHandler = activity.handler();

            registerService(MAINACTIVITYSERVICE,m_mainHandler);

            // get Infos about the app
            if (m_appContext != null) {
                m_packageName = m_appContext.getPackageName();
                m_procName = m_packageName;
            }

            if (m_settings == null)
                m_settings = new Settings(m_procName, m_preferences);

            if (m_settings.m_preferences == null) m_isRoot = Utils.isRoot();
            m_settings.m_preferences = m_preferences;

            if(!DbHandler.getInstance().isReady()) {
                synchronized (m_cachedStatsLocker) {
                    StatisticsData stat = new StatisticsData(0);
                    stat.m_tableName = BatteryUsageTable.TABLE_NAME;
                    stat.m_percentage = currBatteryLevel();
                    stat.m_timeStamp = (new Date()).getTime();
                    m_cachedStats.add(stat);

                }
            }

            startRefreshTimer(m_genericRefreshPeriod);
            //Utils.cmdTest();
        }
        else {
            L.e("No parent activity was set!");
        }
    }

    private void startRefreshTimer(int period) {

        stopRefreshTimer();

        if (m_refresDevInfosTimer == null)
            m_refresDevInfosTimer = new Timer("RefreshDevInfosTimer");

        m_refresDevInfosTimer.schedule(new RefreshSysInfosTask(), 1000, period);

    }

    public List<StatisticsData> getCachedStatistics()
    {
        List<StatisticsData> lData = new ArrayList<>();
        synchronized (m_cachedStatsLocker)
        {
            lData.addAll(m_cachedStats);
            m_cachedStats.clear();
        }

        return lData;
    }

    private void stopRefreshTimer() {
        if (m_refresDevInfosTimer != null) {
            m_refresDevInfosTimer.cancel();
            m_refresDevInfosTimer.purge();
            m_refresDevInfosTimer = null;
        }
    }

    public synchronized void clear(boolean all) {
        deregisterService(MAINACTIVITYSERVICE);
        m_currSysInfos = null;
        m_mainHandler = null;
        m_preferences = null;
        m_settings.m_preferences = null;


        stopRefreshTimer();

        if (all) {
            m_settings = null;
            m_instance = null;
        }
    }

    public synchronized long cpuRefreshTime() {
        return m_settings != null ? m_settings.cpuRefreshTime() : 0L;
    }

    public synchronized void setCpuRefreshTime(long time) {
        m_settings.setCpuRefreshTime(time);
    }

    public synchronized long processListRefreshTime() {
        return m_settings != null ? m_settings.processListRefreshTime() : 0L;
    }

    public synchronized void setProcessListRefreshTime(long time) {
        m_settings.setProcessListRefreshTime(time);
    }

    public synchronized long uiRefreshTime() {
        return m_settings != null ? m_settings.uiRefreshTime() : 0L;
    }

    public synchronized void setUIRefreshTime(long time) {
        m_settings.setUIRefreshTime(time);
    }

    public synchronized long dbDumpResTime() {
        return m_settings != null ? m_settings.dbDumpResTime() : 0L;
    }
    public synchronized void setDbDumpResTime(long time) {
        m_settings.setDbDumpResTime(time);
    }

    public synchronized long batteryRefreshTime() {
        return m_settings != null ? m_settings.batteryRefreshTime() : 0L;
    }

    public synchronized void setBatteryRefreshTime(long time) {
        m_settings.setBatteryRefreshTime(time);
    }

    public synchronized long memRefreshTime() {
        return m_settings != null ? m_settings.memRefreshTime() : 0L;
    }

    public synchronized void setMemRefreshTime(long time) {
        m_settings.setMemRefreshTime(time);
    }

    //Monitor configuration
    public synchronized boolean sysCallMonitorEnabled() {
        return m_settings != null && m_settings.sysCallMonitorEnabled();
    }

    public synchronized boolean deviceMonitorEnabled() {
        return m_settings != null && m_settings.deviceMonitorEnabled();
    }

    public synchronized boolean dbHandlerEnabled() {
        return m_settings != null && m_settings.dbHandlerEnabled();
    }

    public synchronized boolean malwareAnalyserEnabled() {
        return m_settings != null && m_settings.malwareAnalyserEnabled();
    }

    public synchronized boolean processMonitorEnabled() {
        return m_settings != null && m_settings.processMonitorEnabled();
    }

    public synchronized boolean memMonitorEnabled() {
        return m_settings != null && m_settings.memMonitorEnabled();
    }

    public synchronized boolean cpuMonitorEnabled() {
        return m_settings != null && m_settings.cpuMonitorEnabled();
    }

    public synchronized boolean displayMonitorEnabled() {
        return m_settings != null && m_settings.displayMonitorEnabled();
    }

    public synchronized boolean batteryMonitorEnabled() {
        return m_settings != null && m_settings.batteryMonitorEnabled();
    }

    public synchronized boolean sysCallsStatEnabled() {
        return m_settings != null && m_settings.sysCallsStatEnabled();
    }

    public synchronized boolean monitorAllProcessesEnabled() {
        return m_settings != null && m_settings.monitorAllProcessesEnabled();
    }

    public synchronized boolean systemAppsMonitoringEnabled() {
        return m_settings != null && m_settings.systemAppsMonitoringEnabled();
    }

    public synchronized boolean mountDbOnExternalStorage() {
        return m_settings != null && m_settings.mountDbOnExternalStorage();
    }

    public void setMountDbOnExternalStorage(boolean val) {
        if (m_settings != null) {
            m_settings.setMountDbOnExternalStorage(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }
    }

    public synchronized void setSysCallMonitorStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setSysCallMonitorStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }
    }

    public synchronized void setDeviceMonitorStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setDeviceMonitorStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }
    }

    public synchronized void setDbHandlerStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setDbHandlerStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setMalwareAnalyserStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setMalwareAnalyserStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setProcessMonitorStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setProcessMonitorStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setMemMonitorStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setMemMonitorStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setCpuMonitorStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setCpuMonitorStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setDisplayMonitorStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setDisplayMonitorStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setBatteryMonitorStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setBatteryMonitorStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setSysCallsStatisticsStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setSysCallsStatisticsStatus(val);
        }
        else {
            L.e("The Setting instance doesn't yet exist! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setMonitorAllProcessesStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setMonitorAllProcessesStatus(val);
        }
        else {
            L.e("The Setting instance doesn't exist yet! You must called AppData.init() before executing this function");
        }

    }

    public synchronized void setSystemAppsMonitoringStatus(boolean val) {
        if (m_settings != null) {
            m_settings.setSystemAppsMonitoringStatus(val);
        }
        else {
            L.e("The Setting instance doesn't exist yet! You must called AppData.init() before executing this function");
        }

    }

    public static class CurrentSysInfos {
        public long availMem;
        public boolean m_isRoot;
        public boolean m_isCharging;
        public float m_batteryLevel;
        public long m_totalMem;
        public int m_numCpus;
        public String m_cpuName;
        public long m_cpuMaxFreq;
    }

    public static class RefreshInfos {
        public long m_refreshTime = 0;
        public ResourceUsage.RESOURCETYPE m_resourceType = ResourceUsage.RESOURCETYPE.UNKNOWN;
    }

    public static class RefreshSysInfosTask extends TimerTask {
        public static boolean m_reloadStaticsSystInfos = true;
        public static long m_totalMem = 0;
        public static int m_numCpus = 0;
        public static String m_cpuName = "";
        public static int m_cpuMaxFreq = 0;
        public static float m_batteryLevel = 0;
        public static boolean m_savedBattAndScreenStateInDb = false;

        @Override
        public void run() {
            CurrentSysInfos devInfos = new CurrentSysInfos();

            if (m_reloadStaticsSystInfos) {
                m_reloadStaticsSystInfos = false; // these informations are statics, we only load them the fisrttime this class is created!
                m_totalMem = Utils.getTotalRamSize();
                m_numCpus = Runtime.getRuntime().availableProcessors();
                m_cpuName = System.getProperty("os.arch");
                m_cpuMaxFreq = Utils.getCpuMaxFreq();
            }


            devInfos.m_totalMem = m_totalMem;
            devInfos.m_numCpus = m_numCpus;
            devInfos.m_cpuName = m_cpuName;
            devInfos.m_cpuMaxFreq = m_cpuMaxFreq;

            ActivityManager.MemoryInfo outInfo = new ActivityManager.MemoryInfo();
            ActivityManager am = (ActivityManager) AppData.getInstance().appContext().getSystemService(Context.ACTIVITY_SERVICE);
            am.getMemoryInfo(outInfo);
            devInfos.availMem = outInfo.availMem;

            devInfos.m_isRoot = Utils.isRoot();
            boolean isroot = AppData.getInstance().isRoot();
            AppData.getInstance().setIsRoot(devInfos.m_isRoot);

            if (devInfos.m_isRoot && !isroot
                    && AppData.getInstance().sysCallMonitorEnabled()) {
                Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
                if(sig != null) {
                    sig.m_signalId = Signal.UPDATE_SYSCALL_MONITOR_PROC_LIST;
                    sig.emit();
                }
            }

            if(AppData.getInstance().batteryMonitorEnabled()) {
                devInfos.m_isCharging = AppData.getInstance().isDeviceCharging();
                devInfos.m_batteryLevel = AppData.getInstance().currBatteryLevel();

                if (m_batteryLevel != devInfos.m_batteryLevel) {
                    StatisticsData stat = new StatisticsData(0);
                    stat.m_tableName = BatteryUsageTable.TABLE_NAME;
                    stat.m_percentage = devInfos.m_batteryLevel;
                    stat.m_timeStamp = (new Date()).getTime();
                    List<StatisticsData> stats = new ArrayList<>();
                    stats.add(stat);
                    DbHandler.getInstance().saveData(stats, true);
                    m_batteryLevel = devInfos.m_batteryLevel;
                }
            }


            AppData.getInstance().setCurrSysInfos(devInfos);


        }
    }
}
