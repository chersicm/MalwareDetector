package alarilab.malwaredetector.core;

import android.content.SharedPreferences;
import android.os.Handler;
import android.util.Log;

import java.io.File;

import alarilab.malwaredetector.core.resources.ResourceUsage;
import alarilab.malwaredetector.services.DeviceMonitor;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.utility.Utils;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 02.03.15.
 */
class Settings {
    private final static String CPU_REFRESH_TIME_KEY = "CPU_REFRESH_TIME_KEY";
    private final static String MEM_REFRESH_TIME_KEY = "MEM_REFRESH_TIME_KEY";
    private final static String PROC_REFRESH_TIME_KEY = "PROC_REFRESH_TIME_KEY";
    private final static String UI_REFRESH_TIME_KEY = "UI_REFRESH_TIME_KEY";
    private final static String BATTERY_REFRESH_TIME_KEY = "BATTERY_REFRESH_TIME_KEY";
    private final static String MONITOR_CONFIG_STATUS_KEY = "MONITOR_CONFIG_STATUS_KEY";
    private final static String DATABASE_PATH_KEY = "DATABASE_PATH_KEY";
    private final static String DATABASE_MOUNT_POINT_KEY = "DATABASE_MOUNT_POINT_KEY";
    private final static String DB_DUMP_RESTIME_KEY = "DB_DUMP_RESTIME_KEY";

    //private final static String UI_REFRESH_TIME_KEY = "UI_REFRESH_TIME_KEY";

    //settings offset
    private final static int DEV_MONITOR_STATE_OFFSET = 0;
    private final static int DB_HANDLER_STATE_OFFSET = 1;
    private final static int SYSCALLS_MONITOR_STATE_OFFSET = 2;
    private final static int MALWARE_ANALYSER_STATE_OFFSET = 3;
    private final static int PROCESS_MONITOR_STATE_OFFSET = 8;
    private final static int MEM_MONITOR_STATE_OFFSET = 9;
    private final static int CPU_MONITOR_STATE_OFFSET = 10;
    private final static int DISPLAY_MONITOR_STATE_OFFSET = 11;
    private final static int BATTERY_MONITOR_STATE_OFFSET = 12;
    private final static int SYSCALLS_STATISTICS_STATE_OFFSET = 13; //num system call per sec
    private final static int MONITOR_ALL_PROCESSES_OFFSET = 14;
    private final static int SYSTEM_APPS_MONITORING_STATE_OFFSET = 15;
    SharedPreferences m_preferences = null;
    //default settings values
    private long m_cpuRefreshTime = 2000;
    private long m_memRefreshTime = 2000;
    private long m_processListRefreshTime = 2000;
    private long m_uiRefreshTime = 2000;
    private long m_dbDumpResTime = 2000;
    private long m_batteryRefreshTime = 2000;
    private String m_dbPath = "";
    private int m_monitor = 18187; // enable services required for malware analyser
    private boolean m_mountDbOnExternalStorage = false;

    public Settings(String appName, SharedPreferences preferences) {
        m_preferences = preferences;
        m_dbPath = buildDefaultDbPath(appName);
        loadSettings();
    }

    private String buildDefaultDbPath(String appName) {

        if (Utils.isExternalStorageWritable()) {
            return Utils.getDefaultStoragePublicDirectory(Utils.getAppName(appName)) + File.separator + "Database";
        }
        else {
            return AppData.getInstance().appContext().getFilesDir().getPath();
        }
    }

    void loadSettings() {
        if (m_preferences != null) {
//            m_processListRefreshTime = m_preferences.getLong(PROC_REFRESH_TIME_KEY, m_processListRefreshTime);
//            m_cpuRefreshTime = m_preferences.getLong(CPU_REFRESH_TIME_KEY, m_cpuRefreshTime);
//            m_batteryRefreshTime = m_preferences.getLong(BATTERY_REFRESH_TIME_KEY, m_batteryRefreshTime);
//            m_memRefreshTime = m_preferences.getLong(MEM_REFRESH_TIME_KEY, m_memRefreshTime);
//            m_uiRefreshTime = m_preferences.getLong(UI_REFRESH_TIME_KEY, m_uiRefreshTime);
//            m_dbDumpResTime = m_preferences.getLong(DB_DUMP_RESTIME_KEY,m_dbDumpResTime);
//            m_monitor = m_preferences.getInt(MONITOR_CONFIG_STATUS_KEY, m_monitor);
//            m_dbPath = m_preferences.getString(DATABASE_PATH_KEY, m_dbPath);
            m_mountDbOnExternalStorage = m_preferences.getBoolean(DATABASE_MOUNT_POINT_KEY, m_mountDbOnExternalStorage);
        } else {
            L.e("No shared preferences was set!");
        }
    }

    public long cpuRefreshTime() {
        return m_cpuRefreshTime;
    }

    public void setCpuRefreshTime(long cpuRefreshTime) {
        this.m_cpuRefreshTime = cpuRefreshTime;
        saveLongValPreferences(CPU_REFRESH_TIME_KEY, m_cpuRefreshTime);
        notifyRefreshTimeChanges(ResourceUsage.RESOURCETYPE.CPU, m_cpuRefreshTime);
    }

    private void saveLongValPreferences(String key, long val) {
        if (m_preferences != null) {
            SharedPreferences.Editor editor = m_preferences.edit();
            editor.putLong(key, val);
            editor.apply();
        }
        else {
            L.e("No shared preferences was set!");
        }
    }

    private void notifyRefreshTimeChanges(ResourceUsage.RESOURCETYPE resourcetype, long time) {
        Handler handler = DeviceMonitor.getInstance().handler();
        AppData.RefreshInfos infos = new AppData.RefreshInfos();
        infos.m_resourceType = resourcetype;
        infos.m_refreshTime = time;
        Signal sig = AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(handler);
        if(sig != null) {
            sig.m_signalId = Signal.REFRESH_TIME_CHANGED;
            sig.m_obj = infos;
            sig.emit();//Utils.emit(sig);
        }
    }

    public long memRefreshTime() {
        return m_memRefreshTime;
    }

    public void setMemRefreshTime(long memRefreshTime) {
        if (m_memRefreshTime != memRefreshTime) {
            this.m_memRefreshTime = memRefreshTime;
            saveLongValPreferences(MEM_REFRESH_TIME_KEY, m_memRefreshTime);
            notifyRefreshTimeChanges(ResourceUsage.RESOURCETYPE.RAM, m_memRefreshTime);
        }
    }

    public boolean mountDbOnExternalStorage() {
        return m_mountDbOnExternalStorage;
    }

    public void setMountDbOnExternalStorage(boolean val) {
        m_mountDbOnExternalStorage = val;
        saveBoolValPreferences(DATABASE_MOUNT_POINT_KEY, val);
    }

    private void saveBoolValPreferences(String key, boolean val) {
        if (m_preferences != null) {
            SharedPreferences.Editor editor = m_preferences.edit();
            editor.putBoolean(key, val);
            editor.apply();
        }
        else {
            L.e("No shared preferences was set!");
        }
    }

    public String getDatabasePath() {
        return m_dbPath;
    }

    public long processListRefreshTime() {
        return m_processListRefreshTime;
    }

    public void setProcessListRefreshTime(long processListRefreshTime) {
        if (m_processListRefreshTime != processListRefreshTime) {
            this.m_processListRefreshTime = processListRefreshTime;
            saveLongValPreferences(PROC_REFRESH_TIME_KEY, m_processListRefreshTime);
            notifyRefreshTimeChanges(ResourceUsage.RESOURCETYPE.PROC, m_processListRefreshTime);
        }
    }

    public long uiRefreshTime() {
        return m_uiRefreshTime;
    }

    public long dbDumpResTime(){
        return m_dbDumpResTime;
    }
    public void setUIRefreshTime(long uiRefreshTime) {
        if (m_uiRefreshTime != uiRefreshTime) {
            this.m_uiRefreshTime = uiRefreshTime;
            saveLongValPreferences(UI_REFRESH_TIME_KEY, m_uiRefreshTime);
            notifyRefreshTimeChanges(ResourceUsage.RESOURCETYPE.DISPLAY, m_uiRefreshTime);
        }
    }

    public void setDbDumpResTime(long resTime) {
        if (m_dbDumpResTime != resTime) {
            this.m_dbDumpResTime = resTime;
            saveLongValPreferences(DB_DUMP_RESTIME_KEY, m_dbDumpResTime);
        }
    }


    public long batteryRefreshTime() {
        return m_batteryRefreshTime;
    }

    public void setBatteryRefreshTime(long batteryRefreshTime) {
        if (m_batteryRefreshTime != batteryRefreshTime) {
            this.m_batteryRefreshTime = batteryRefreshTime;
            saveLongValPreferences(BATTERY_REFRESH_TIME_KEY, m_batteryRefreshTime);
            notifyRefreshTimeChanges(ResourceUsage.RESOURCETYPE.BATTERY, m_batteryRefreshTime);
        }
    }

    public boolean deviceMonitorEnabled() {
        return Utils.value(m_monitor, DEV_MONITOR_STATE_OFFSET, 1) == 1;
    }

    public boolean dbHandlerEnabled() {
        return Utils.value(m_monitor, DB_HANDLER_STATE_OFFSET, 1) == 1;
    }

    public boolean malwareAnalyserEnabled() {
        return Utils.value(m_monitor, MALWARE_ANALYSER_STATE_OFFSET, 1) == 1;
    }

    public boolean processMonitorEnabled() {
        return Utils.value(m_monitor, PROCESS_MONITOR_STATE_OFFSET, 1) == 1;
    }

    public boolean memMonitorEnabled() {
        return Utils.value(m_monitor, MEM_MONITOR_STATE_OFFSET, 1) == 1;
    }

    public boolean cpuMonitorEnabled() {
        return Utils.value(m_monitor, CPU_MONITOR_STATE_OFFSET, 1) == 1;
    }

    public boolean displayMonitorEnabled() {
        return Utils.value(m_monitor, DISPLAY_MONITOR_STATE_OFFSET, 1) == 1;
    }

    public boolean sysCallMonitorEnabled() {
        return Utils.value(m_monitor, SYSCALLS_MONITOR_STATE_OFFSET, 1) == 1;
    }

    public boolean sysCallsStatEnabled() {
        return Utils.value(m_monitor, SYSCALLS_STATISTICS_STATE_OFFSET, 1) == 1;
    }

    public boolean monitorAllProcessesEnabled() {
        return Utils.value(m_monitor, MONITOR_ALL_PROCESSES_OFFSET, 1) == 1;
    }

    public boolean systemAppsMonitoringEnabled() {
        return Utils.value(m_monitor, SYSTEM_APPS_MONITORING_STATE_OFFSET, 1) == 1;
    }

    public boolean batteryMonitorEnabled() {
        return Utils.value(m_monitor, BATTERY_MONITOR_STATE_OFFSET, 1) == 1;
    }

    public void setSystemAppsMonitoringStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, SYSTEM_APPS_MONITORING_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE); //new Utils.Signal(DeviceMonitor.getInstance().handler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_SYSTEM_APPS_FLAG_CHANGED;
            sig.emit();
        }

    }

    private void saveFeaturesConfStatus() {
        if (m_preferences != null) {
            SharedPreferences.Editor editor = m_preferences.edit();
            editor.putInt(MONITOR_CONFIG_STATUS_KEY, m_monitor);
            editor.apply();
        }
    }

    public void setSysCallsStatisticsStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, SYSCALLS_STATISTICS_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();
        if (sysCallMonitorEnabled()) {
            Signal sig =  AppData.obtainSignal(AppData.SYSCALLSSERVICE);//new Utils.Signal(SysCallsMonitor.getInstance().handler());
            if(sig != null) {
                sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
                sig.emit();
            }
        }
        else {
            L.w("The SysCalls monitor must be enabled first!");
        }
    }

    public void setSysCallMonitorStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, SYSCALLS_MONITOR_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.MAINACTIVITYSERVICE);//new Utils.Signal(AppData.getInstance().mainHandler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }

    }

    public void setDeviceMonitorStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, DEV_MONITOR_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();
        Signal sig =  AppData.obtainSignal(AppData.MAINACTIVITYSERVICE);//new Utils.Signal();
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }
    }

    public void setDbHandlerStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, DB_HANDLER_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.MAINACTIVITYSERVICE);//new Utils.Signal();
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }
    }

    public void setMalwareAnalyserStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, MALWARE_ANALYSER_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.MAINACTIVITYSERVICE);//new Utils.Signal();
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }
    }

    public void setProcessMonitorStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, PROCESS_MONITOR_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }
    }

    public void setMemMonitorStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, MEM_MONITOR_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }
    }
    //

    public void setCpuMonitorStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, CPU_MONITOR_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }
    }

    public void setDisplayMonitorStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, DISPLAY_MONITOR_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();
        Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.emit();
        }
    }

    public void setBatteryMonitorStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, BATTERY_MONITOR_STATE_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();
        Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_CONFIG_CHANGED;
            sig.m_arg1 = batteryMonitorEnabled() ? 1 : 0;
            sig.emit();
        }
    }

    public void setMonitorAllProcessesStatus(boolean enable) {
        m_monitor = Utils.setValue(m_monitor, MONITOR_ALL_PROCESSES_OFFSET, 1, enable ? 1 : 0);
        saveFeaturesConfStatus();

        Signal sig =  AppData.obtainSignal(AppData.DEVICEMONITORSERVICE);//new Utils.Signal(DeviceMonitor.getInstance().handler());
        if(sig != null) {
            sig.m_signalId = Signal.MONITOR_ALL_PROCESSES_FLAG_CHANGED;
            sig.emit();

            sig.setHandler(AppData.getInstance().mainHandler()); //now send to the mainActivity so it can immediately update the ProcessesTab
            sig.emit();
        }

    }


}
