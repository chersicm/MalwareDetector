package alarilab.malwaredetector.core.resources;

import android.app.ActivityManager;
import android.content.Context;
import android.os.Debug;
import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.DeviceInfos;
import alarilab.malwaredetector.database.tables.RamUsageTable;
import alarilab.malwaredetector.shared.DataExchanged;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.shared.StatisticsData;
import alarilab.malwaredetector.utility.Utils;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 27.03.15.
 */
public class Memory extends ResourceInfos {

    private DeviceInfos deviceInfos;

    public Memory(DeviceInfos deviceInfos, long delay) {
        super(ResourceUsage.RESOURCETYPE.RAM, delay);
        this.deviceInfos = deviceInfos;
        setMonitored(AppData.getInstance().memMonitorEnabled());
        this.m_handler = deviceInfos.getMessageHandler();
        this.m_timeOutMsgId = Signal.SYNC_MEMINFOS_TIMEOUT;
        m_resData = new DataExchanged.MemoryData();
    }

    @Override
    public void onConfigChanged() {
        setMonitored(AppData.getInstance().memMonitorEnabled());
    }

    @Override
    public List<StatisticsData> getUsageInfos() {
        return deviceInfos.getResourceUsageInfos(m_resourceType);
    }

    @Override
    public void init() {
        super.init();
        readStaticMemInfos();
    }

    public void readStaticMemInfos() {
        ((DataExchanged.MemoryData) m_resData).m_totalMem = Utils.getTotalRamSize();
    }

    @Override
    public void refresh() {
        //update some common memory infos
        if (m_resData != null) {
            ActivityManager.MemoryInfo outInfo = new ActivityManager.MemoryInfo();
            ActivityManager am = (ActivityManager) AppData.getInstance().appContext().getSystemService(Context.ACTIVITY_SERVICE);
            am.getMemoryInfo(outInfo);
            ((DataExchanged.MemoryData) m_resData).m_freeMem = outInfo.availMem;
        }

        //update memory usage of processes
        deviceInfos.refreshResourceUsage(m_resourceType);
    }


    public static class RAMUsage extends ResourceUsage {

        private long m_ramUsed;
        private int[] record; // MalwareAnalyser features

        private final String dex = ".dex"; // desired rows
        private final String ttf = ".ttf";
        private final String other = "Other";
        private final String jar = ".jar";

        private long start;


        public RAMUsage(int uid, int pid, String pckName) {
            super(RESOURCETYPE.RAM, uid, pid, pckName);
            //init();
        }

        public long getRamUsed() {
            return m_ramUsed;
        }

        @Override
        public void refresh() {
            ActivityManager am = (ActivityManager) AppData.getInstance().appContext().getSystemService(Context.ACTIVITY_SERVICE);
            Debug.MemoryInfo[] memoryInfo = am.getProcessMemoryInfo(new int[]{m_pid});

            if (memoryInfo != null) {
                m_ramUsed = memoryInfo[0].getTotalPss();
            } else {
                L.e("error: null occurrence of 'memoryInfo'", "Memory.refresh()");
            }

            start = System.currentTimeMillis();
            record = new int[StatisticsData.RECORD_SIZE];

            try {
                String[] cl = new String[]{
                        "dumpsys", "meminfo", "" + m_pid
                }; // command line

                Process p = Runtime.getRuntime().exec(cl);
                BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));

                String line;
                while ((line = br.readLine()) != null) {

                    String[] toks = line.split(" +");
                    if (toks.length < 4)
                        continue;

//                    printDumpsysLine(toks, line);

                    // fill record
                    int i = 0;
                    while (toks[i].equals("")) i++; // skip empty tokens

                    String row_name = toks[i];
                    i += 2;

                    if (row_name.equals("TOTAL")) {
                        break;
                    } else if (row_name.equals(this.dex)) {
                        record[StatisticsData.dexmmapPSS] = Integer.parseInt(toks[i]);
                        record[StatisticsData.dexmmapPrivateDirty] = Integer.parseInt(toks[i + 1]);
                    } else if (row_name.equals(this.ttf)) {
                        record[StatisticsData.ttfmmapPSS] = Integer.parseInt(toks[i]);
                    } else if (row_name.equals(this.other)) {
                        record[StatisticsData.OthermmapPrivateDirty] = Integer.parseInt(toks[i + 1]);
                    } else if (row_name.equals(this.jar)) {
                        record[StatisticsData.jarmmapPSS] = Integer.parseInt(toks[i]);
                    }
                }
            } catch (IOException e) {
                L.e("Could not get memory info!", "Memory.refresh()");
            }

//            printTotalTime();

        }

        @Override
        public StatisticsData getUsageInfos() {
            StatisticsData data = new StatisticsData(m_pid);
            data.m_tableName = RamUsageTable.TABLE_NAME;
            data.m_quantity = m_ramUsed;
            data.m_timeStamp = (new Date()).getTime();
            // include other features
            data.createRecord(record);
            return data;
        }

        private void printDumpsysLine(String[] toks, String line) {
            Log.d("dumpsys_meminfo [PID=" + m_pid + "]", line);
            Log.d("tokens", Arrays.toString(toks));
        }

        private void printTotalTime() {
            long totaltime = System.currentTimeMillis() - start;
            Log.d("dumpsys_meminfo " + m_pid, "TOTAL TIME : " + totaltime + " ms");
        }
    }
}
