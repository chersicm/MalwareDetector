package alarilab.malwaredetector.core.resources;

import android.os.Handler;

import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import alarilab.malwaredetector.shared.DataExchanged;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.shared.StatisticsData;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 28.02.15.
 */
public abstract class ResourceInfos {

    private static long m_defaultDelay = 2000; //ms
    private long m_period = m_defaultDelay;
    protected Timer m_refreshTimer = null;
    protected String m_resourceName = "";
    protected Handler m_handler = null;
    protected int m_timeOutMsgId = Signal.UNKNOWN;
    protected boolean m_isMonitored = false;
    protected DataExchanged.ResourceData m_resData = null;

    protected ResourceUsage.RESOURCETYPE m_resourceType = ResourceUsage.RESOURCETYPE.UNKNOWN;

    ResourceInfos(ResourceUsage.RESOURCETYPE type, long delay) {
        m_resourceType = type;
        m_resourceName = m_resourceType.toString();

        if (delay > 0)
            m_period = delay;
        else
            m_period = m_defaultDelay;
    }

    ResourceInfos(ResourceUsage.RESOURCETYPE type) {
        m_resourceType = type;
        m_resourceName = m_resourceType.toString();
        m_period = 0;
        m_defaultDelay = 0;
    }

    public boolean isMonitored() {
        return m_isMonitored;
    }

    public void setMonitored(boolean monitored) {
        this.m_isMonitored = monitored;
        updateTimer();
    }

    private void updateTimer() {
        stopTimer();
        if (m_isMonitored) {
            if (m_period > 0) {
                if (m_refreshTimer == null)
                    m_refreshTimer = new Timer(m_resourceName + "_refreshTimerThread", false);
                L.d("Timer Started!");
                m_refreshTimer.schedule(new RefreshInfoTask(), m_period, m_period);
            }
            else if (m_period == 0) {
                L.d("Timer Stopped!");
            }
        }
        else {
            L.d("Not monitored! Timer Stopped!");
        }
    }

    private void stopTimer() {
        if (m_refreshTimer != null) {
            m_refreshTimer.cancel();
            m_refreshTimer.purge();
            m_refreshTimer = null;
        }

        if (m_handler != null) {
            m_handler.removeMessages(m_timeOutMsgId);
        }
    }

    public abstract void onConfigChanged();

    public abstract List<StatisticsData> getUsageInfos();

    public void notifyUi() {
        L.w("This function does nothing!");
    }

    public void init() {
        refresh();
        updateTimer();
    }

    public void refresh() {
        L.w("This function does nothing!");
    }

    public ResourceUsage.RESOURCETYPE type() {
        return m_resourceType;
    }

    public DataExchanged.ResourceData getInfos() {
        return m_resData;
    }

    protected final void onRefreshTimeOut() {
        //L.w("onRefreshTimeOut!!!!");
        if (m_handler != null) {
            if (m_timeOutMsgId != Signal.UNKNOWN) {
                if (m_resourceType != ResourceUsage.RESOURCETYPE.UNKNOWN) {
                    Signal sig = new Signal(m_handler);
                    sig.m_arg1 = m_resourceType.ordinal();
                    sig.m_signalId = m_timeOutMsgId;
                    sig.emit();//Utils.emit(sig);
                }
                else {
                    L.w("Cannot send message to handler with an [Unknown] resource type!");
                }
            }
            else {
                L.w("No message id for timeout of the resource [" + m_resourceType + "] was set! ");
            }
        }
        else {
            L.e("No message handler was set for handling the timer timeout for the resource [" + m_resourceType + "]");
        }

    }

    public void updateRefreshTime(long time) {
        if (m_period >= 0) {
            if (m_period != time) {
                m_period = time;
                updateTimer();
            }
        }
        else {
            L.w("Refresh time ( " + time + " ) not valid. Should not be negative!");
        }
    }

    public void clear() {

        stopTimer();
        m_handler = null;
        m_period = m_defaultDelay;
    }

    protected class RefreshInfoTask extends TimerTask {
        @Override
        public void run() {
            onRefreshTimeOut();
        }
    }

}