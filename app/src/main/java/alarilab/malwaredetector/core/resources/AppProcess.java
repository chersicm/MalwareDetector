package alarilab.malwaredetector.core.resources;

import android.graphics.drawable.Drawable;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.shared.StatisticsData;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 28.02.15.
 */
public class AppProcess extends ResourceUsage {

    private List<ResourceUsage> m_listResUsage = null;
    //private int m_pid = 0;
    //private int m_uid = 0;
    //private String m_packageName = "";
    private String m_processName = "";
    private Drawable m_icon = null;
    private boolean m_monitored = false;

    private boolean isMalware = false;

    public AppProcess(int uid, int pid, String packName, String processName, Drawable img) {
        super(RESOURCETYPE.PROC, uid, pid, "");
        m_uid = uid;
        m_pid = pid;
        m_packageName = packName;
        m_processName = processName;
        m_icon = img;
        m_monitored = AppData.getInstance().monitorAllProcessesEnabled();
    }

    public boolean isMalware() {
        return isMalware;
    }

    public void setMalware(boolean malware) {
        isMalware = malware;
    }

    public boolean isMonitored() {
        return m_monitored;
    }

    public void setMonitored(boolean monitored) {
        this.m_monitored = monitored;
    }

    public Drawable icon() {
        return m_icon;
    }

    public String processName() {
        return m_processName;
    }

    public String packageName() {
        return m_packageName;
    }

    public void setPackageName(String packageName) {
        this.m_packageName = packageName;
    }

    public void setProcessName(String processName) {
        this.m_processName = processName;
    }

    public ProcessData getData() {
        ProcessData ret = new ProcessData();
        ret.m_batteryUsage = batteryUsage();
        ret.m_cpuUsage = cpuUsage();
        ret.m_ramUsage = ramUsage();
        ret.m_name = m_processName;
        ret.m_pid = m_pid;
        ret.m_uid = m_uid;
        ret.m_monitorEnabled = m_monitored;
        ret.m_icon = m_icon;
        ret.m_icon = m_icon;
        ret.m_numSysCalls = 0;

        return ret;
    }

    public float batteryUsage() {
        Battery.Usage ret = (Battery.Usage) getResourceUsage(RESOURCETYPE.BATTERY);
        return ret != null ? ret.getPercentage() : 0;
    }

    public float cpuUsage() {
        Processor.Usage ret = (Processor.Usage) getResourceUsage(RESOURCETYPE.CPU);
        return ret != null ? ret.getPercentage() : 0;
    }

    public long ramUsage() {
        Memory.RAMUsage ret = (Memory.RAMUsage) getResourceUsage(RESOURCETYPE.RAM);
        return ret != null ? ret.getRamUsed() : 0;
    }

    public ResourceUsage getResourceUsage(ResourceUsage.RESOURCETYPE type) {
        ResourceUsage ret = null;
        for (ResourceUsage res : m_listResUsage) {
            if (res.resourceType() == type) {
                ret = res;
                break;
            }
        }

        return ret;
    }

    public long numSysCalls() {
        return 0;
    }

    public boolean isEqual(AppProcess proc) {
        return m_uid == proc.uid() && m_pid == proc.pid();
    }

    public int pid() {
        return m_pid;
    }

    public int uid() {
        return m_uid;
    }

    public void clear() {
        super.clear();

        Iterator<ResourceUsage> iter = m_listResUsage.iterator();
        while (iter.hasNext()) {
            ResourceUsage resUs = iter.next();
            resUs.clear();
            iter.remove();
        }
        m_listResUsage.clear();
        m_icon = null;
    }

    @Override
    public void init() {
        L.d("Initializing the process: [" + m_processName + "]");
        m_listResUsage = new ArrayList<ResourceUsage>();
        m_listResUsage.add(new Processor.Usage(m_uid, m_pid, m_packageName));
        m_listResUsage.add(new Memory.RAMUsage(m_uid, m_pid, m_packageName));
        m_listResUsage.add(new Battery.Usage(m_uid, m_pid, m_packageName));
        //m_listResUsage.add(new SystemCallEvents(m_uid, m_pid));
    }

    @Override
    public void refresh() {
        L.w("This function does nothing!");
    }

    @Override
    public StatisticsData getUsageInfos() {
        return null;
    }

    public void refresh(ResourceUsage.RESOURCETYPE type) {

        if (m_monitored) {
            if (type == ResourceUsage.RESOURCETYPE.ALL) {
                for (ResourceUsage res : m_listResUsage) {
                    res.refresh();
                }
            }
            else {
                ResourceUsage res = getResourceUsage(type);
                if (res != null) {
                    res.refresh();
                }
                else {
                    L.e("The resource (" + type + ") was not found!");
                }
            }
        }

    }

    public StatisticsData getUsageInfos(ResourceUsage.RESOURCETYPE type) {
        StatisticsData ret = null;
        ResourceUsage res = getResourceUsage(type);
        if (res != null) {
            ret = res.getUsageInfos();
        } else {
            L.e("The resource (" + type + ") was not found!");
        }
        return ret;
    }

    public static class ProcessData {
        public int m_uid = 0;
        public int m_pid = 0;
        public long m_ramUsage = 0;
        public float m_batteryUsage = 0;
        public float m_cpuUsage = 0;
        public String m_name;
        public boolean m_monitorEnabled = false;
        public Drawable m_icon = null;
        public long m_numSysCalls = 0;

    }
}
