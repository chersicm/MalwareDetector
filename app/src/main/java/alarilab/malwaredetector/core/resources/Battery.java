package alarilab.malwaredetector.core.resources;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.core.DeviceInfos;
import alarilab.malwaredetector.database.tables.BatteryUsageTable;
import alarilab.malwaredetector.shared.DataExchanged;
import alarilab.malwaredetector.shared.Signal;
import alarilab.malwaredetector.shared.StatisticsData;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 27.03.15.
 */
public class Battery extends ResourceInfos {

    private DeviceInfos deviceInfos;

    public Battery(DeviceInfos deviceInfos, long delay) {
        super(ResourceUsage.RESOURCETYPE.BATTERY, delay);
        this.deviceInfos = deviceInfos;
        //setMonitored(AppData.getInstance().batteryMonitorEnabled());
        setMonitored(false);
        this.m_handler = deviceInfos.getMessageHandler();
        this.m_timeOutMsgId = Signal.SYNC_BATTERY_TIMEOUT;
        m_resData = new DataExchanged.BatteryData();
    }

    @Override
    public void onConfigChanged() {
        //setMonitored(AppData.getInstance().batteryMonitorEnabled());
    }

    @Override
    public List<StatisticsData> getUsageInfos() {
        return deviceInfos.getResourceUsageInfos(m_resourceType);
    }

    @Override
    public void refresh() {
        //update some common battery infos
        if (m_resData != null) {
            DataExchanged.BatteryData data = (DataExchanged.BatteryData) m_resData;
            data.m_isCharging = AppData.getInstance().isDeviceCharging();
            data.m_batteryLevel = AppData.getInstance().currBatteryLevel();
        }

        //update battery usage of processes
        deviceInfos.refreshResourceUsage(m_resourceType);

    }


    public static class Usage extends ResourceUsage {

        protected float m_percentage = 0;

        public Usage(int uid, int pid, String pckName) {
            super(RESOURCETYPE.BATTERY, uid, pid, pckName);
            //init();
        }

        public float getPercentage() {
            return m_percentage;
        }

        @Override
        public void refresh() {

            //final StringBuilder battInfo = new StringBuilder();
            try {
                final List<String> commandLine = new ArrayList<String>();
                commandLine.add("dumpsys");
                commandLine.add("batterystats");
                commandLine.add(m_packageName);

                final java.lang.Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
                final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));

                while (true) {
                    final String line = bufferedReader.readLine();
                    if (line == null) {
                        break;
                    }
//                    L.d("dumpsys_battery", line);
                    //battInfo.append(line);
                    //battInfo.append("\n");
                }

            } catch (IOException e) {
                L.e("Could not retrieve data");
            }

        }

        @Override
        public StatisticsData getUsageInfos() {
            StatisticsData data = new StatisticsData(m_pid);
            data.m_tableName = BatteryUsageTable.TABLE_NAME;
            data.m_percentage = m_percentage;
            data.m_timeStamp = (new Date()).getTime();
            return data;
        }
    }
}
