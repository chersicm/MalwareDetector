package alarilab.malwaredetector.shared;

import android.os.Handler;
import android.os.Message;

import alarilab.malwaredetector.core.AppData;
import alarilab.malwaredetector.utility.logger.L;


public class Signal {
    public static final int UNKNOWN = 0;
    public static final int SYNC_PID_TIMEOUT = 1;
    public static final int SYNC_MEMINFOS_TIMEOUT = 2;
    public static final int SYNC_CPUINFOS_TIMEOUT = 3;
    public static final int SYNC_BATTERY_TIMEOUT = 4;
    public static final int SYNC_DISPLAY_TIMEOUT = 5;
    public static final int REFRESH_TIME_CHANGED = 6;
    public static final int MONITOR_CONFIG_CHANGED = 7;
    public static final int NEW_SYSCALLS_AVAILABLE = 8;
    public static final int PROCESS_LIST_UPDATED = 9;
    public static final int MONITOR_ALL_PROCESSES_FLAG_CHANGED = 10;
    public static final int PROCESS_MONITOR_FLAG_CHANGED = 11;
    public static final int NEW_STATS_LIST_TO_WRITE_IN_DB_AVAILABLE = 12;
    public static final int SAVE_TABLES_CONTENTS_IN_FILE = 13;
    public static final int REFRESH_SYSTEM_INFORMATIONS = 14;
    public static final int UPDATE_SYSCALL_MONITOR_PROC_LIST = 15;
    public static final int MONITOR_SYSTEM_APPS_FLAG_CHANGED = 16;

    public static final int MALWARE_ANALYSER_TIMEOUT = 17;
    public static final int MALWARE_LIST_UPDATED = 18;
    public static final int MALWARE_TIMEOUT = 19;
    public static final int RECORD_AVAILABLE = 20;

    public int m_signalId = UNKNOWN;
    public int m_arg1 = -1;
    public int m_arg2 = -1;
    public Object m_obj = null;
    private String m_senderThread;
    private Handler m_destHandler = null;

    public Signal() {
        m_destHandler = AppData.getInstance().mainHandler();
        //m_senderThread = Utils.getThreadSignature();
    }

    public Signal(Handler dest) {
        m_destHandler = dest;
        //m_senderThread = Utils.getThreadSignature();
        if (m_destHandler == null) {
            L.w("A null destination was set. The message will be sent to the MainActivity!");
            m_destHandler = AppData.getInstance().mainHandler();
        }
    }

    public void setHandler(Handler val) {
        m_destHandler = val;
    }

    public void clear()
    {
        init();
    }

    public void init() {
        m_signalId = UNKNOWN;
        m_arg1 = -1;
        m_arg2 = -1;
        m_obj = null;
        m_senderThread = "";
        m_destHandler = null;
    }

    public boolean emit() {
        boolean ret = false;
        if (m_destHandler != null) {
            Message msg = m_destHandler.obtainMessage(m_signalId, m_arg1, m_arg2, m_obj);
            ret = m_destHandler.sendMessage(msg);
        }
        else {
            L.e("An handler obj must be set!");
        }

        return ret;
    }

    public static class In1<T1> {
        public T1 input1;
    }

    public static class In2<T1, T2> {
        public T1 input1;
        public T2 input2;
    }

    public static class In3<T1, T2, T3> {
        public T1 input1;
        public T2 input2;
        public T3 input3;
    }

    public static class In4<T1, T2, T3, T4> {
        public T1 input1;
        public T2 input2;
        public T3 input3;
        public T4 input4;
    }

    public static class In5<T1, T2, T3, T4, T5> {
        public T1 input1;
        public T2 input2;
        public T3 input3;
        public T4 input4;
        public T5 input5;
    }
}
