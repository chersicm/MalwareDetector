package alarilab.malwaredetector.shared;

import android.util.Log;

import java.text.SimpleDateFormat;
import java.util.Date;

import alarilab.malwaredetector.services.DbHandler;
import alarilab.malwaredetector.utility.Utils;
import alarilab.malwaredetector.utility.logger.L;

/**
 * Created by vidal on 05.03.15.
 */
public class StatisticsData {
    public String m_tableName = "";
    public float m_percentage = 0; // CPU total
    public long m_quantity = 0; // RAM total
    public int m_numCallsPerSec = 0;
    public long m_timeStamp = 0;
    public String m_sysCallStr = "";
    private int m_pid = -1;
    public long m_creationTimeStamp = 0;
    public int m_screenStat = 0;
    public String m_sysCallTimeStampStr = "";

    // new features
    private Number[] record;
    public static final int RECORD_SIZE = 6;
    public static final int dexmmapPSS = 0;
    public static final int dexmmapPrivateDirty = 1;
    public static final int ttfmmapPSS = 2;
    public static final int OthermmapPrivateDirty = 3;
    public static final int jarmmapPSS = 4;
    public static final int CPUtotal = 5;

    private int recordClass; // malware (0) or trusted (1)

    private void StatisticsData(int pid) {
        this.m_pid = pid;
        m_creationTimeStamp = (new Date()).getTime();
        record = new Number[RECORD_SIZE];
    }

    public StatisticsData(int pid) {
        StatisticsData(pid);
    }

    public void createRecord(int[] record) {
        try {
            for (int i = dexmmapPSS; i < RECORD_SIZE - 1; i++)
                this.record[i] = record[i]; // CPU Total will be inserted later (addCPU)
        } catch (Exception e) {
            Log.e("createRecord", "Record might not be correctly initialized");
            e.printStackTrace();
        }
    }

    public Number[] getRecord() {
        return record;
    }

    public int getRecordClass() {
        return recordClass;
    }

    public void setRecordClass(int recordClass) {
        this.recordClass = recordClass;
    }

    // insert CPU Total in the record
    public void addCPU(double CPUusage) {
        record[CPUtotal] = CPUusage;
    }

    public void storeRecord(int recordClass) {
        setRecordClass(recordClass);
        // send message to DbHandler
        if (!DbHandler.isNull()) {
            DbHandler handler = DbHandler.getInstance();
            Signal sig = new Signal(handler.handler());
            sig.m_signalId = Signal.RECORD_AVAILABLE;
            sig.m_obj = this;
            sig.emit();
        } else {
            L.e("DbHandler not initialized: record could not be saved", "StatisticsData");
        }

    }

    public void dump() {
        String dateStr = newTimeStamp();
        Log.d("StatisticsData"," PID: [" + m_pid + "]\n TbName: [" + m_tableName + "]\n PERC: [" + Utils.toHumanReadablePerc(m_percentage) +
                "]\n SIZE: [" + m_quantity + "]\n NumSysCalls: [" + m_numCallsPerSec + "], \n TimeStamp: [" + dateStr + "][" + m_timeStamp +
                "]\n SysCalls: [" + m_sysCallStr + "]");
    }

    public void dumpCPU() {
        String dateStr = newTimeStamp();
        Log.d("StatisticsData-CPU", " PID: [" + m_pid + "]\n CPU Total: [" + Utils.toHumanReadablePerc(m_percentage) +
                "]\n TimeStamp: [" + dateStr + "][" + m_timeStamp + "]");
    }

    public void dumpRecord() {
        String dateStr = newTimeStamp();
        Log.d("StatisticsData-RAM", " PID: [" + m_pid + "]\n" +
                " .dex mmap PSS: [" + record[dexmmapPSS] +
                " kB]\n .dex mmap Private Dirty: [" + record[dexmmapPrivateDirty] +
                " kB]\n .ttf mmap PSS: [" + record[ttfmmapPSS] +
                " kB]\n CPU Total: [" + Utils.toHumanReadablePerc(record[CPUtotal].floatValue()) +
                "]\n Other mmap Private Dirty: [" + record[OthermmapPrivateDirty] +
                " kB]\n .jar mmap PSS: [" + record[jarmmapPSS] +
                " kB]\n TimeStamp: [" + dateStr + "][" + m_timeStamp + "]");
    }

    public void updateCreationDate() {
        m_creationTimeStamp = (new Date()).getTime();
    }

    public int pid() {
        return m_pid;
    }

    public void setPid(int pid) {
        this.m_pid = pid;
    }

    public boolean isValid() {
        return m_pid != -1;
    }

    private String newTimeStamp() {
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yy:hh:mm:ss");
        String dateStr = format.format(new Date(m_timeStamp));
        return dateStr;
    }
}
